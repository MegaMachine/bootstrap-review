if(function(h,C){var e,n,y=typeof C,g=h.document,t=h.location,i=h.jQuery,o=h.$,r={},p=[],s="1.9.1",v=p.concat,a=p.push,u=p.slice,l=p.indexOf,c=r.toString,m=r.hasOwnProperty,f=s.trim,mt=function(t,e){return new mt.fn.init(t,e,n)},d=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,N=/\S+/g,b=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,x=/^(?:(<[\w\W]+>)[^>]*|#([\w-]*))$/,w=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,T=/^[\],:{}\s]*$/,E=/(?:^|:|,)(?:\s*\[)+/g,k=/\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,S=/"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g,$=/^-ms-/,A=/-([\da-z])/gi,D=function(t,e){return e.toUpperCase()},j=function(t){(g.addEventListener||"load"===t.type||"complete"===g.readyState)&&(O(),mt.ready())},O=function(){g.addEventListener?(g.removeEventListener("DOMContentLoaded",j,!1),h.removeEventListener("load",j,!1)):(g.detachEvent("onreadystatechange",j),h.detachEvent("onload",j))};function L(t){var e=t.length,n=mt.type(t);return!mt.isWindow(t)&&(!(1!==t.nodeType||!e)||("array"===n||"function"!==n&&(0===e||"number"==typeof e&&0<e&&e-1 in t)))}mt.fn=mt.prototype={jquery:s,constructor:mt,init:function(t,e,n){var i,o;if(!t)return this;if("string"!=typeof t)return t.nodeType?(this.context=this[0]=t,this.length=1,this):mt.isFunction(t)?n.ready(t):(t.selector!==C&&(this.selector=t.selector,this.context=t.context),mt.makeArray(t,this));if(!(i="<"===t.charAt(0)&&">"===t.charAt(t.length-1)&&3<=t.length?[null,t,null]:x.exec(t))||!i[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(i[1]){if(e=e instanceof mt?e[0]:e,mt.merge(this,mt.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:g,!0)),w.test(i[1])&&mt.isPlainObject(e))for(i in e)mt.isFunction(this[i])?this[i](e[i]):this.attr(i,e[i]);return this}if((o=g.getElementById(i[2]))&&o.parentNode){if(o.id!==i[2])return n.find(t);this.length=1,this[0]=o}return this.context=g,this.selector=t,this},selector:"",length:0,size:function(){return this.length},toArray:function(){return u.call(this)},get:function(t){return null==t?this.toArray():t<0?this[this.length+t]:this[t]},pushStack:function(t){var e=mt.merge(this.constructor(),t);return e.prevObject=this,e.context=this.context,e},each:function(t,e){return mt.each(this,t,e)},ready:function(t){return mt.ready.promise().done(t),this},slice:function(){return this.pushStack(u.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(0<=n&&n<e?[this[n]]:[])},map:function(n){return this.pushStack(mt.map(this,function(t,e){return n.call(t,e,t)}))},end:function(){return this.prevObject||this.constructor(null)},push:a,sort:[].sort,splice:[].splice},mt.fn.init.prototype=mt.fn,mt.extend=mt.fn.extend=function(){var t,e,n,i,o,r,s=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[1]||{},a=2),"object"==typeof s||mt.isFunction(s)||(s={}),l===a&&(s=this,--a);a<l;a++)if(null!=(o=arguments[a]))for(i in o)t=s[i],s!==(n=o[i])&&(c&&n&&(mt.isPlainObject(n)||(e=mt.isArray(n)))?(r=e?(e=!1,t&&mt.isArray(t)?t:[]):t&&mt.isPlainObject(t)?t:{},s[i]=mt.extend(c,r,n)):n!==C&&(s[i]=n));return s},mt.extend({noConflict:function(t){return h.$===mt&&(h.$=o),t&&h.jQuery===mt&&(h.jQuery=i),mt},isReady:!1,readyWait:1,holdReady:function(t){t?mt.readyWait++:mt.ready(!0)},ready:function(t){if(!0===t?!--mt.readyWait:!mt.isReady){if(!g.body)return setTimeout(mt.ready);(mt.isReady=!0)!==t&&0<--mt.readyWait||(e.resolveWith(g,[mt]),mt.fn.trigger&&mt(g).trigger("ready").off("ready"))}},isFunction:function(t){return"function"===mt.type(t)},isArray:Array.isArray||function(t){return"array"===mt.type(t)},isWindow:function(t){return null!=t&&t==t.window},isNumeric:function(t){return!isNaN(parseFloat(t))&&isFinite(t)},type:function(t){return null==t?String(t):"object"==typeof t||"function"==typeof t?r[c.call(t)]||"object":typeof t},isPlainObject:function(t){if(!t||"object"!==mt.type(t)||t.nodeType||mt.isWindow(t))return!1;try{if(t.constructor&&!m.call(t,"constructor")&&!m.call(t.constructor.prototype,"isPrototypeOf"))return!1}catch(t){return!1}var e;for(e in t);return e===C||m.call(t,e)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},error:function(t){throw new Error(t)},parseHTML:function(t,e,n){if(!t||"string"!=typeof t)return null;"boolean"==typeof e&&(n=e,e=!1),e=e||g;var i=w.exec(t),o=!n&&[];return i?[e.createElement(i[1])]:(i=mt.buildFragment([t],e,o),o&&mt(o).remove(),mt.merge([],i.childNodes))},parseJSON:function(t){return h.JSON&&h.JSON.parse?h.JSON.parse(t):null===t?t:"string"==typeof t&&(t=mt.trim(t))&&T.test(t.replace(k,"@").replace(S,"]").replace(E,""))?new Function("return "+t)():void mt.error("Invalid JSON: "+t)},parseXML:function(t){var e;if(!t||"string"!=typeof t)return null;try{h.DOMParser?e=(new DOMParser).parseFromString(t,"text/xml"):((e=new ActiveXObject("Microsoft.XMLDOM")).async="false",e.loadXML(t))}catch(t){e=C}return e&&e.documentElement&&!e.getElementsByTagName("parsererror").length||mt.error("Invalid XML: "+t),e},noop:function(){},globalEval:function(t){t&&mt.trim(t)&&(h.execScript||function(t){h.eval.call(h,t)})(t)},camelCase:function(t){return t.replace($,"ms-").replace(A,D)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e,n){var i=0,o=t.length,r=L(t);if(n){if(r)for(;i<o&&!1!==e.apply(t[i],n);i++);else for(i in t)if(!1===e.apply(t[i],n))break}else if(r)for(;i<o&&!1!==e.call(t[i],i,t[i]);i++);else for(i in t)if(!1===e.call(t[i],i,t[i]))break;return t},trim:f&&!f.call("\ufeffÂ ")?function(t){return null==t?"":f.call(t)}:function(t){return null==t?"":(t+"").replace(b,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(L(Object(t))?mt.merge(n,"string"==typeof t?[t]:t):a.call(n,t)),n},inArray:function(t,e,n){var i;if(e){if(l)return l.call(e,t,n);for(i=e.length,n=n?n<0?Math.max(0,i+n):n:0;n<i;n++)if(n in e&&e[n]===t)return n}return-1},merge:function(t,e){var n=e.length,i=t.length,o=0;if("number"==typeof n)for(;o<n;o++)t[i++]=e[o];else for(;e[o]!==C;)t[i++]=e[o++];return t.length=i,t},grep:function(t,e,n){var i=[],o=0,r=t.length;for(n=!!n;o<r;o++)n!==!!e(t[o],o)&&i.push(t[o]);return i},map:function(t,e,n){var i,o=0,r=t.length,s=[];if(L(t))for(;o<r;o++)null!=(i=e(t[o],o,n))&&(s[s.length]=i);else for(o in t)null!=(i=e(t[o],o,n))&&(s[s.length]=i);return v.apply([],s)},guid:1,proxy:function(t,e){var n,i,o;return"string"==typeof e&&(o=t[e],e=t,t=o),mt.isFunction(t)?(n=u.call(arguments,2),(i=function(){return t.apply(e||this,n.concat(u.call(arguments)))}).guid=t.guid=t.guid||mt.guid++,i):C},access:function(t,e,n,i,o,r,s){var a=0,l=t.length,c=null==n;if("object"===mt.type(n))for(a in o=!0,n)mt.access(t,e,a,n[a],!0,r,s);else if(i!==C&&(o=!0,mt.isFunction(i)||(s=!0),c&&(e=s?(e.call(t,i),null):(c=e,function(t,e,n){return c.call(mt(t),n)})),e))for(;a<l;a++)e(t[a],n,s?i:i.call(t[a],a,e(t[a],n)));return o?t:c?e.call(t):l?e(t[0],n):r},now:function(){return(new Date).getTime()}}),mt.ready.promise=function(t){if(!e)if(e=mt.Deferred(),"complete"===g.readyState)setTimeout(mt.ready);else if(g.addEventListener)g.addEventListener("DOMContentLoaded",j,!1),h.addEventListener("load",j,!1);else{g.attachEvent("onreadystatechange",j),h.attachEvent("onload",j);var n=!1;try{n=null==h.frameElement&&g.documentElement}catch(t){}n&&n.doScroll&&function e(){if(!mt.isReady){try{n.doScroll("left")}catch(t){return setTimeout(e,50)}O(),mt.ready()}}()}return e.promise(t)},mt.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(t,e){r["[object "+e+"]"]=e.toLowerCase()}),n=mt(g);var I={};mt.Callbacks=function(o){var t,n;o="string"==typeof o?I[o]||(n=I[t=o]={},mt.each(t.match(N)||[],function(t,e){n[e]=!0}),n):mt.extend({},o);var i,e,r,s,a,l,c=[],u=!o.once&&[],p=function(t){for(e=o.memory&&t,r=!0,a=l||0,l=0,s=c.length,i=!0;c&&a<s;a++)if(!1===c[a].apply(t[0],t[1])&&o.stopOnFalse){e=!1;break}i=!1,c&&(u?u.length&&p(u.shift()):e?c=[]:f.disable())},f={add:function(){if(c){var t=c.length;!function i(t){mt.each(t,function(t,e){var n=mt.type(e);"function"===n?o.unique&&f.has(e)||c.push(e):e&&e.length&&"string"!==n&&i(e)})}(arguments),i?s=c.length:e&&(l=t,p(e))}return this},remove:function(){return c&&mt.each(arguments,function(t,e){for(var n;-1<(n=mt.inArray(e,c,n));)c.splice(n,1),i&&(n<=s&&s--,n<=a&&a--)}),this},has:function(t){return t?-1<mt.inArray(t,c):!(!c||!c.length)},empty:function(){return c=[],this},disable:function(){return c=u=e=C,this},disabled:function(){return!c},lock:function(){return u=C,e||f.disable(),this},locked:function(){return!u},fireWith:function(t,e){return e=[t,(e=e||[]).slice?e.slice():e],!c||r&&!u||(i?u.push(e):p(e)),this},fire:function(){return f.fireWith(this,arguments),this},fired:function(){return!!r}};return f},mt.extend({Deferred:function(t){var s=[["resolve","done",mt.Callbacks("once memory"),"resolved"],["reject","fail",mt.Callbacks("once memory"),"rejected"],["notify","progress",mt.Callbacks("memory")]],o="pending",a={state:function(){return o},always:function(){return l.done(arguments).fail(arguments),this},then:function(){var r=arguments;return mt.Deferred(function(o){mt.each(s,function(t,e){var n=e[0],i=mt.isFunction(r[t])&&r[t];l[e[1]](function(){var t=i&&i.apply(this,arguments);t&&mt.isFunction(t.promise)?t.promise().done(o.resolve).fail(o.reject).progress(o.notify):o[n+"With"](this===a?o.promise():this,i?[t]:arguments)})}),r=null}).promise()},promise:function(t){return null!=t?mt.extend(t,a):a}},l={};return a.pipe=a.then,mt.each(s,function(t,e){var n=e[2],i=e[3];a[e[1]]=n.add,i&&n.add(function(){o=i},s[1^t][2].disable,s[2][2].lock),l[e[0]]=function(){return l[e[0]+"With"](this===l?a:this,arguments),this},l[e[0]+"With"]=n.fireWith}),a.promise(l),t&&t.call(l,l),l},when:function(t){var o,e,n,i=0,r=u.call(arguments),s=r.length,a=1!==s||t&&mt.isFunction(t.promise)?s:0,l=1===a?t:mt.Deferred(),c=function(e,n,i){return function(t){n[e]=this,i[e]=1<arguments.length?u.call(arguments):t,i===o?l.notifyWith(n,i):--a||l.resolveWith(n,i)}};if(1<s)for(o=new Array(s),e=new Array(s),n=new Array(s);i<s;i++)r[i]&&mt.isFunction(r[i].promise)?r[i].promise().done(c(i,n,r)).fail(l.reject).progress(c(i,e,o)):--a;return a||l.resolveWith(n,r),l.promise()}}),mt.support=function(){var r,t,e,n,i,o,s,a,l,c,u=g.createElement("div");if(u.setAttribute("className","t"),u.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",t=u.getElementsByTagName("*"),e=u.getElementsByTagName("a")[0],!t||!e||!t.length)return{};s=(i=g.createElement("select")).appendChild(g.createElement("option")),n=u.getElementsByTagName("input")[0],e.style.cssText="top:1px;float:left;opacity:.5",r={getSetAttribute:"t"!==u.className,leadingWhitespace:3===u.firstChild.nodeType,tbody:!u.getElementsByTagName("tbody").length,htmlSerialize:!!u.getElementsByTagName("link").length,style:/top/.test(e.getAttribute("style")),hrefNormalized:"/a"===e.getAttribute("href"),opacity:/^0.5/.test(e.style.opacity),cssFloat:!!e.style.cssFloat,checkOn:!!n.value,optSelected:s.selected,enctype:!!g.createElement("form").enctype,html5Clone:"<:nav></:nav>"!==g.createElement("nav").cloneNode(!0).outerHTML,boxModel:"CSS1Compat"===g.compatMode,deleteExpando:!0,noCloneEvent:!0,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableMarginRight:!0,boxSizingReliable:!0,pixelPosition:!1},n.checked=!0,r.noCloneChecked=n.cloneNode(!0).checked,i.disabled=!0,r.optDisabled=!s.disabled;try{delete u.test}catch(t){r.deleteExpando=!1}for(c in(n=g.createElement("input")).setAttribute("value",""),r.input=""===n.getAttribute("value"),n.value="t",n.setAttribute("type","radio"),r.radioValue="t"===n.value,n.setAttribute("checked","t"),n.setAttribute("name","t"),(o=g.createDocumentFragment()).appendChild(n),r.appendChecked=n.checked,r.checkClone=o.cloneNode(!0).cloneNode(!0).lastChild.checked,u.attachEvent&&(u.attachEvent("onclick",function(){r.noCloneEvent=!1}),u.cloneNode(!0).click()),{submit:!0,change:!0,focusin:!0})u.setAttribute(a="on"+c,"t"),r[c+"Bubbles"]=a in h||!1===u.attributes[a].expando;return u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",r.clearCloneStyle="content-box"===u.style.backgroundClip,mt(function(){var t,e,n,i="padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;",o=g.getElementsByTagName("body")[0];o&&((t=g.createElement("div")).style.cssText="border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px",o.appendChild(t).appendChild(u),u.innerHTML="<table><tr><td></td><td>t</td></tr></table>",(n=u.getElementsByTagName("td"))[0].style.cssText="padding:0;margin:0;border:0;display:none",l=0===n[0].offsetHeight,n[0].style.display="",n[1].style.display="none",r.reliableHiddenOffsets=l&&0===n[0].offsetHeight,u.innerHTML="",u.style.cssText="box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;",r.boxSizing=4===u.offsetWidth,r.doesNotIncludeMarginInBodyOffset=1!==o.offsetTop,h.getComputedStyle&&(r.pixelPosition="1%"!==(h.getComputedStyle(u,null)||{}).top,r.boxSizingReliable="4px"===(h.getComputedStyle(u,null)||{width:"4px"}).width,(e=u.appendChild(g.createElement("div"))).style.cssText=u.style.cssText=i,e.style.marginRight=e.style.width="0",u.style.width="1px",r.reliableMarginRight=!parseFloat((h.getComputedStyle(e,null)||{}).marginRight)),typeof u.style.zoom!==y&&(u.innerHTML="",u.style.cssText=i+"width:1px;padding:1px;display:inline;zoom:1",r.inlineBlockNeedsLayout=3===u.offsetWidth,u.style.display="block",u.innerHTML="<div></div>",u.firstChild.style.width="5px",r.shrinkWrapBlocks=3!==u.offsetWidth,r.inlineBlockNeedsLayout&&(o.style.zoom=1)),o.removeChild(t),t=u=n=e=null)}),t=i=o=s=e=n=null,r}();var H=/(?:\{[\s\S]*\}|\[[\s\S]*\])$/,R=/([A-Z])/g;function _(t,e,n,i){if(mt.acceptData(t)){var o,r,s=mt.expando,a="string"==typeof e,l=t.nodeType,c=l?mt.cache:t,u=l?t[s]:t[s]&&s;if(u&&c[u]&&(i||c[u].data)||!a||n!==C)return u||(l?t[s]=u=p.pop()||mt.guid++:u=s),c[u]||(c[u]={},l||(c[u].toJSON=mt.noop)),"object"!=typeof e&&"function"!=typeof e||(i?c[u]=mt.extend(c[u],e):c[u].data=mt.extend(c[u].data,e)),o=c[u],i||(o.data||(o.data={}),o=o.data),n!==C&&(o[mt.camelCase(e)]=n),a?null==(r=o[e])&&(r=o[mt.camelCase(e)]):r=o,r}}function F(t,e,n){if(mt.acceptData(t)){var i,o,r,s=t.nodeType,a=s?mt.cache:t,l=s?t[mt.expando]:mt.expando;if(a[l]){if(e&&(r=n?a[l]:a[l].data)){for((i=0,o=(e=mt.isArray(e)?e.concat(mt.map(e,mt.camelCase)):e in r?[e]:(e=mt.camelCase(e))in r?[e]:e.split(" ")).length);i<o;i++)delete r[e[i]];if(!(n?M:mt.isEmptyObject)(r))return}(n||(delete a[l].data,M(a[l])))&&(s?mt.cleanData([t],!0):mt.support.deleteExpando||a!=a.window?delete a[l]:a[l]=null)}}}function P(t,e,n){if(n===C&&1===t.nodeType){var i="data-"+e.replace(R,"-$1").toLowerCase();if("string"==typeof(n=t.getAttribute(i))){try{n="true"===n||"false"!==n&&("null"===n?null:+n+""===n?+n:H.test(n)?mt.parseJSON(n):n)}catch(t){}mt.data(t,e,n)}else n=C}return n}function M(t){var e;for(e in t)if(("data"!==e||!mt.isEmptyObject(t[e]))&&"toJSON"!==e)return!1;return!0}mt.extend({cache:{},expando:"jQuery"+(s+Math.random()).replace(/\D/g,""),noData:{embed:!0,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",applet:!0},hasData:function(t){return!!(t=t.nodeType?mt.cache[t[mt.expando]]:t[mt.expando])&&!M(t)},data:function(t,e,n){return _(t,e,n)},removeData:function(t,e){return F(t,e)},_data:function(t,e,n){return _(t,e,n,!0)},_removeData:function(t,e){return F(t,e,!0)},acceptData:function(t){if(t.nodeType&&1!==t.nodeType&&9!==t.nodeType)return!1;var e=t.nodeName&&mt.noData[t.nodeName.toLowerCase()];return!e||!0!==e&&t.getAttribute("classid")===e}}),mt.fn.extend({data:function(e,t){var n,i,o=this[0],r=0,s=null;if(e!==C)return"object"==typeof e?this.each(function(){mt.data(this,e)}):mt.access(this,function(t){if(t===C)return o?P(o,e,mt.data(o,e)):null;this.each(function(){mt.data(this,e,t)})},null,t,1<arguments.length,null,!0);if(this.length&&(s=mt.data(o),1===o.nodeType&&!mt._data(o,"parsedAttrs"))){for(n=o.attributes;r<n.length;r++)(i=n[r].name).indexOf("data-")||(i=mt.camelCase(i.slice(5)),P(o,i,s[i]));mt._data(o,"parsedAttrs",!0)}return s},removeData:function(t){return this.each(function(){mt.removeData(this,t)})}}),mt.extend({queue:function(t,e,n){var i;if(t)return e=(e||"fx")+"queue",i=mt._data(t,e),n&&(!i||mt.isArray(n)?i=mt._data(t,e,mt.makeArray(n)):i.push(n)),i||[]},dequeue:function(t,e){e=e||"fx";var n=mt.queue(t,e),i=n.length,o=n.shift(),r=mt._queueHooks(t,e);"inprogress"===o&&(o=n.shift(),i--),(r.cur=o)&&("fx"===e&&n.unshift("inprogress"),delete r.stop,o.call(t,function(){mt.dequeue(t,e)},r)),!i&&r&&r.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return mt._data(t,n)||mt._data(t,n,{empty:mt.Callbacks("once memory").add(function(){mt._removeData(t,e+"queue"),mt._removeData(t,n)})})}}),mt.fn.extend({queue:function(e,n){var t=2;return"string"!=typeof e&&(n=e,e="fx",t--),arguments.length<t?mt.queue(this[0],e):n===C?this:this.each(function(){var t=mt.queue(this,e,n);mt._queueHooks(this,e),"fx"===e&&"inprogress"!==t[0]&&mt.dequeue(this,e)})},dequeue:function(t){return this.each(function(){mt.dequeue(this,t)})},delay:function(i,t){return i=mt.fx&&mt.fx.speeds[i]||i,t=t||"fx",this.queue(t,function(t,e){var n=setTimeout(t,i);e.stop=function(){clearTimeout(n)}})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,o=mt.Deferred(),r=this,s=this.length,a=function(){--i||o.resolveWith(r,[r])};for("string"!=typeof t&&(e=t,t=C),t=t||"fx";s--;)(n=mt._data(r[s],t+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),o.promise(e)}});var q,B,W=/[\t\r\n]/g,U=/\r/g,z=/^(?:input|select|textarea|button|object)$/i,X=/^(?:a|area)$/i,V=/^(?:checked|selected|autofocus|autoplay|async|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped)$/i,Q=/^(?:checked|selected)$/i,Y=mt.support.getSetAttribute,J=mt.support.input;mt.fn.extend({attr:function(t,e){return mt.access(this,mt.attr,t,e,1<arguments.length)},removeAttr:function(t){return this.each(function(){mt.removeAttr(this,t)})},prop:function(t,e){return mt.access(this,mt.prop,t,e,1<arguments.length)},removeProp:function(t){return t=mt.propFix[t]||t,this.each(function(){try{this[t]=C,delete this[t]}catch(t){}})},addClass:function(e){var t,n,i,o,r,s=0,a=this.length,l="string"==typeof e&&e;if(mt.isFunction(e))return this.each(function(t){mt(this).addClass(e.call(this,t,this.className))});if(l)for(t=(e||"").match(N)||[];s<a;s++)if(i=1===(n=this[s]).nodeType&&(n.className?(" "+n.className+" ").replace(W," "):" ")){for(r=0;o=t[r++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");n.className=mt.trim(i)}return this},removeClass:function(e){var t,n,i,o,r,s=0,a=this.length,l=0===arguments.length||"string"==typeof e&&e;if(mt.isFunction(e))return this.each(function(t){mt(this).removeClass(e.call(this,t,this.className))});if(l)for(t=(e||"").match(N)||[];s<a;s++)if(i=1===(n=this[s]).nodeType&&(n.className?(" "+n.className+" ").replace(W," "):"")){for(r=0;o=t[r++];)for(;0<=i.indexOf(" "+o+" ");)i=i.replace(" "+o+" "," ");n.className=e?mt.trim(i):""}return this},toggleClass:function(r,s){var a=typeof r,l="boolean"==typeof s;return mt.isFunction(r)?this.each(function(t){mt(this).toggleClass(r.call(this,t,this.className,s),s)}):this.each(function(){if("string"===a)for(var t,e=0,n=mt(this),i=s,o=r.match(N)||[];t=o[e++];)i=l?i:!n.hasClass(t),n[i?"addClass":"removeClass"](t);else a!==y&&"boolean"!==a||(this.className&&mt._data(this,"__className__",this.className),this.className=this.className||!1===r?"":mt._data(this,"__className__")||"")})},hasClass:function(t){for(var e=" "+t+" ",n=0,i=this.length;n<i;n++)if(1===this[n].nodeType&&0<=(" "+this[n].className+" ").replace(W," ").indexOf(e))return!0;return!1},val:function(i){var t,o,r,e=this[0];return arguments.length?(r=mt.isFunction(i),this.each(function(t){var e,n=mt(this);1===this.nodeType&&(null==(e=r?i.call(this,t,n.val()):i)?e="":"number"==typeof e?e+="":mt.isArray(e)&&(e=mt.map(e,function(t){return null==t?"":t+""})),(o=mt.valHooks[this.type]||mt.valHooks[this.nodeName.toLowerCase()])&&"set"in o&&o.set(this,e,"value")!==C||(this.value=e))})):e?(o=mt.valHooks[e.type]||mt.valHooks[e.nodeName.toLowerCase()])&&"get"in o&&(t=o.get(e,"value"))!==C?t:"string"==typeof(t=e.value)?t.replace(U,""):null==t?"":t:void 0}}),mt.extend({valHooks:{option:{get:function(t){var e=t.attributes.value;return!e||e.specified?t.value:t.text}},select:{get:function(t){for(var e,n,i=t.options,o=t.selectedIndex,r="select-one"===t.type||o<0,s=r?null:[],a=r?o+1:i.length,l=o<0?a:r?o:0;l<a;l++)if(((n=i[l]).selected||l===o)&&(mt.support.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!mt.nodeName(n.parentNode,"optgroup"))){if(e=mt(n).val(),r)return e;s.push(e)}return s},set:function(t,e){var n=mt.makeArray(e);return mt(t).find("option").each(function(){this.selected=0<=mt.inArray(mt(this).val(),n)}),n.length||(t.selectedIndex=-1),n}}},attr:function(t,e,n){var i,o,r,s=t.nodeType;if(t&&3!==s&&8!==s&&2!==s)return typeof t.getAttribute===y?mt.prop(t,e,n):((o=1!==s||!mt.isXMLDoc(t))&&(e=e.toLowerCase(),i=mt.attrHooks[e]||(V.test(e)?B:q)),n===C?i&&o&&"get"in i&&null!==(r=i.get(t,e))?r:(typeof t.getAttribute!==y&&(r=t.getAttribute(e)),null==r?C:r):null!==n?i&&o&&"set"in i&&(r=i.set(t,n,e))!==C?r:(t.setAttribute(e,n+""),n):void mt.removeAttr(t,e))},removeAttr:function(t,e){var n,i,o=0,r=e&&e.match(N);if(r&&1===t.nodeType)for(;n=r[o++];)i=mt.propFix[n]||n,V.test(n)?!Y&&Q.test(n)?t[mt.camelCase("default-"+n)]=t[i]=!1:t[i]=!1:mt.attr(t,n,""),t.removeAttribute(Y?n:i)},attrHooks:{type:{set:function(t,e){if(!mt.support.radioValue&&"radio"===e&&mt.nodeName(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},propFix:{tabindex:"tabIndex",readonly:"readOnly",for:"htmlFor",class:"className",maxlength:"maxLength",cellspacing:"cellSpacing",cellpadding:"cellPadding",rowspan:"rowSpan",colspan:"colSpan",usemap:"useMap",frameborder:"frameBorder",contenteditable:"contentEditable"},prop:function(t,e,n){var i,o,r=t.nodeType;if(t&&3!==r&&8!==r&&2!==r)return(1!==r||!mt.isXMLDoc(t))&&(e=mt.propFix[e]||e,o=mt.propHooks[e]),n!==C?o&&"set"in o&&(i=o.set(t,n,e))!==C?i:t[e]=n:o&&"get"in o&&null!==(i=o.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=t.getAttributeNode("tabindex");return e&&e.specified?parseInt(e.value,10):z.test(t.nodeName)||X.test(t.nodeName)&&t.href?0:C}}}}),B={get:function(t,e){var n=mt.prop(t,e),i="boolean"==typeof n&&t.getAttribute(e),o="boolean"==typeof n?J&&Y?null!=i:Q.test(e)?t[mt.camelCase("default-"+e)]:!!i:t.getAttributeNode(e);return o&&!1!==o.value?e.toLowerCase():C},set:function(t,e,n){return!1===e?mt.removeAttr(t,n):J&&Y||!Q.test(n)?t.setAttribute(!Y&&mt.propFix[n]||n,n):t[mt.camelCase("default-"+n)]=t[n]=!0,n}},J&&Y||(mt.attrHooks.value={get:function(t,e){var n=t.getAttributeNode(e);return mt.nodeName(t,"input")?t.defaultValue:n&&n.specified?n.value:C},set:function(t,e,n){if(!mt.nodeName(t,"input"))return q&&q.set(t,e,n);t.defaultValue=e}}),Y||(q=mt.valHooks.button={get:function(t,e){var n=t.getAttributeNode(e);return n&&("id"===e||"name"===e||"coords"===e?""!==n.value:n.specified)?n.value:C},set:function(t,e,n){var i=t.getAttributeNode(n);return i||t.setAttributeNode(i=t.ownerDocument.createAttribute(n)),i.value=e+="","value"===n||e===t.getAttribute(n)?e:C}},mt.attrHooks.contenteditable={get:q.get,set:function(t,e,n){q.set(t,""!==e&&e,n)}},mt.each(["width","height"],function(t,n){mt.attrHooks[n]=mt.extend(mt.attrHooks[n],{set:function(t,e){if(""===e)return t.setAttribute(n,"auto"),e}})})),mt.support.hrefNormalized||(mt.each(["href","src","width","height"],function(t,n){mt.attrHooks[n]=mt.extend(mt.attrHooks[n],{get:function(t){var e=t.getAttribute(n,2);return null==e?C:e}})}),mt.each(["href","src"],function(t,e){mt.propHooks[e]={get:function(t){return t.getAttribute(e,4)}}})),mt.support.style||(mt.attrHooks.style={get:function(t){return t.style.cssText||C},set:function(t,e){return t.style.cssText=e+""}}),mt.support.optSelected||(mt.propHooks.selected=mt.extend(mt.propHooks.selected,{get:function(t){var e=t.parentNode;return e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex),null}})),mt.support.enctype||(mt.propFix.enctype="encoding"),mt.support.checkOn||mt.each(["radio","checkbox"],function(){mt.valHooks[this]={get:function(t){return null===t.getAttribute("value")?"on":t.value}}}),mt.each(["radio","checkbox"],function(){mt.valHooks[this]=mt.extend(mt.valHooks[this],{set:function(t,e){if(mt.isArray(e))return t.checked=0<=mt.inArray(mt(t).val(),e)}})});var G=/^(?:input|select|textarea)$/i,K=/^key/,Z=/^(?:mouse|contextmenu)|click/,tt=/^(?:focusinfocus|focusoutblur)$/,et=/^([^.]*)(?:\.(.+)|)$/;function nt(){return!0}function it(){return!1}mt.event={global:{},add:function(t,e,n,i,o){var r,s,a,l,c,u,p,f,d,h,g,m=mt._data(t);if(m){for(n.handler&&(n=(l=n).handler,o=l.selector),n.guid||(n.guid=mt.guid++),(s=m.events)||(s=m.events={}),(u=m.handle)||((u=m.handle=function(t){return typeof mt===y||t&&mt.event.triggered===t.type?C:mt.event.dispatch.apply(u.elem,arguments)}).elem=t),a=(e=(e||"").match(N)||[""]).length;a--;)d=g=(r=et.exec(e[a])||[])[1],h=(r[2]||"").split(".").sort(),c=mt.event.special[d]||{},d=(o?c.delegateType:c.bindType)||d,c=mt.event.special[d]||{},p=mt.extend({type:d,origType:g,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&mt.expr.match.needsContext.test(o),namespace:h.join(".")},l),(f=s[d])||((f=s[d]=[]).delegateCount=0,c.setup&&!1!==c.setup.call(t,i,h,u)||(t.addEventListener?t.addEventListener(d,u,!1):t.attachEvent&&t.attachEvent("on"+d,u))),c.add&&(c.add.call(t,p),p.handler.guid||(p.handler.guid=n.guid)),o?f.splice(f.delegateCount++,0,p):f.push(p),mt.event.global[d]=!0;t=null}},remove:function(t,e,n,i,o){var r,s,a,l,c,u,p,f,d,h,g,m=mt.hasData(t)&&mt._data(t);if(m&&(u=m.events)){for(c=(e=(e||"").match(N)||[""]).length;c--;)if(d=g=(a=et.exec(e[c])||[])[1],h=(a[2]||"").split(".").sort(),d){for(p=mt.event.special[d]||{},f=u[d=(i?p.delegateType:p.bindType)||d]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),l=r=f.length;r--;)s=f[r],!o&&g!==s.origType||n&&n.guid!==s.guid||a&&!a.test(s.namespace)||i&&i!==s.selector&&("**"!==i||!s.selector)||(f.splice(r,1),s.selector&&f.delegateCount--,p.remove&&p.remove.call(t,s));l&&!f.length&&(p.teardown&&!1!==p.teardown.call(t,h,m.handle)||mt.removeEvent(t,d,m.handle),delete u[d])}else for(d in u)mt.event.remove(t,d+e[c],n,i,!0);mt.isEmptyObject(u)&&(delete m.handle,mt._removeData(t,"events"))}},trigger:function(t,e,n,i){var o,r,s,a,l,c,u,p=[n||g],f=m.call(t,"type")?t.type:t,d=m.call(t,"namespace")?t.namespace.split("."):[];if(s=c=n=n||g,3!==n.nodeType&&8!==n.nodeType&&!tt.test(f+mt.event.triggered)&&(0<=f.indexOf(".")&&(f=(d=f.split(".")).shift(),d.sort()),r=f.indexOf(":")<0&&"on"+f,(t=t[mt.expando]?t:new mt.Event(f,"object"==typeof t&&t)).isTrigger=!0,t.namespace=d.join("."),t.namespace_re=t.namespace?new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=C,t.target||(t.target=n),e=null==e?[t]:mt.makeArray(e,[t]),l=mt.event.special[f]||{},i||!l.trigger||!1!==l.trigger.apply(n,e))){if(!i&&!l.noBubble&&!mt.isWindow(n)){for(a=l.delegateType||f,tt.test(a+f)||(s=s.parentNode);s;s=s.parentNode)p.push(s),c=s;c===(n.ownerDocument||g)&&p.push(c.defaultView||c.parentWindow||h)}for(u=0;(s=p[u++])&&!t.isPropagationStopped();)t.type=1<u?a:l.bindType||f,(o=(mt._data(s,"events")||{})[t.type]&&mt._data(s,"handle"))&&o.apply(s,e),(o=r&&s[r])&&mt.acceptData(s)&&o.apply&&!1===o.apply(s,e)&&t.preventDefault();if(t.type=f,!i&&!t.isDefaultPrevented()&&(!l._default||!1===l._default.apply(n.ownerDocument,e))&&("click"!==f||!mt.nodeName(n,"a"))&&mt.acceptData(n)&&r&&n[f]&&!mt.isWindow(n)){(c=n[r])&&(n[r]=null),mt.event.triggered=f;try{n[f]()}catch(t){}mt.event.triggered=C,c&&(n[r]=c)}return t.result}},dispatch:function(t){t=mt.event.fix(t);var e,n,i,o,r,s,a=u.call(arguments),l=(mt._data(this,"events")||{})[t.type]||[],c=mt.event.special[t.type]||{};if((a[0]=t).delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,t)){for(s=mt.event.handlers.call(this,t,l),e=0;(o=s[e++])&&!t.isPropagationStopped();)for(t.currentTarget=o.elem,r=0;(i=o.handlers[r++])&&!t.isImmediatePropagationStopped();)t.namespace_re&&!t.namespace_re.test(i.namespace)||(t.handleObj=i,t.data=i.data,(n=((mt.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,a))!==C&&!1===(t.result=n)&&(t.preventDefault(),t.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,t),t.result}},handlers:function(t,e){var n,i,o,r,s=[],a=e.delegateCount,l=t.target;if(a&&l.nodeType&&(!t.button||"click"!==t.type))for(;l!=this;l=l.parentNode||this)if(1===l.nodeType&&(!0!==l.disabled||"click"!==t.type)){for(o=[],r=0;r<a;r++)o[n=(i=e[r]).selector+" "]===C&&(o[n]=i.needsContext?0<=mt(n,this).index(l):mt.find(n,this,null,[l]).length),o[n]&&o.push(i);o.length&&s.push({elem:l,handlers:o})}return a<e.length&&s.push({elem:this,handlers:e.slice(a)}),s},fix:function(t){if(t[mt.expando])return t;var e,n,i,o=t.type,r=t,s=this.fixHooks[o];for(s||(this.fixHooks[o]=s=Z.test(o)?this.mouseHooks:K.test(o)?this.keyHooks:{}),i=s.props?this.props.concat(s.props):this.props,t=new mt.Event(r),e=i.length;e--;)t[n=i[e]]=r[n];return t.target||(t.target=r.srcElement||g),3===t.target.nodeType&&(t.target=t.target.parentNode),t.metaKey=!!t.metaKey,s.filter?s.filter(t,r):t},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(t,e){return null==t.which&&(t.which=null!=e.charCode?e.charCode:e.keyCode),t}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(t,e){var n,i,o,r=e.button,s=e.fromElement;return null==t.pageX&&null!=e.clientX&&(o=(i=t.target.ownerDocument||g).documentElement,n=i.body,t.pageX=e.clientX+(o&&o.scrollLeft||n&&n.scrollLeft||0)-(o&&o.clientLeft||n&&n.clientLeft||0),t.pageY=e.clientY+(o&&o.scrollTop||n&&n.scrollTop||0)-(o&&o.clientTop||n&&n.clientTop||0)),!t.relatedTarget&&s&&(t.relatedTarget=s===t.target?e.toElement:s),t.which||r===C||(t.which=1&r?1:2&r?3:4&r?2:0),t}},special:{load:{noBubble:!0},click:{trigger:function(){if(mt.nodeName(this,"input")&&"checkbox"===this.type&&this.click)return this.click(),!1}},focus:{trigger:function(){if(this!==g.activeElement&&this.focus)try{return this.focus(),!1}catch(t){}},delegateType:"focusin"},blur:{trigger:function(){if(this===g.activeElement&&this.blur)return this.blur(),!1},delegateType:"focusout"},beforeunload:{postDispatch:function(t){t.result!==C&&(t.originalEvent.returnValue=t.result)}}},simulate:function(t,e,n,i){var o=mt.extend(new mt.Event,n,{type:t,isSimulated:!0,originalEvent:{}});i?mt.event.trigger(o,null,e):mt.event.dispatch.call(e,o),o.isDefaultPrevented()&&n.preventDefault()}},mt.removeEvent=g.removeEventListener?function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n,!1)}:function(t,e,n){var i="on"+e;t.detachEvent&&(typeof t[i]===y&&(t[i]=null),t.detachEvent(i,n))},mt.Event=function(t,e){if(!(this instanceof mt.Event))return new mt.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||!1===t.returnValue||t.getPreventDefault&&t.getPreventDefault()?nt:it):this.type=t,e&&mt.extend(this,e),this.timeStamp=t&&t.timeStamp||mt.now(),this[mt.expando]=!0},mt.Event.prototype={isDefaultPrevented:it,isPropagationStopped:it,isImmediatePropagationStopped:it,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=nt,t&&(t.preventDefault?t.preventDefault():t.returnValue=!1)},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=nt,t&&(t.stopPropagation&&t.stopPropagation(),t.cancelBubble=!0)},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=nt,this.stopPropagation()}},mt.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(t,o){mt.event.special[t]={delegateType:o,bindType:o,handle:function(t){var e,n=t.relatedTarget,i=t.handleObj;return n&&(n===this||mt.contains(this,n))||(t.type=i.origType,e=i.handler.apply(this,arguments),t.type=o),e}}}),mt.support.submitBubbles||(mt.event.special.submit={setup:function(){if(mt.nodeName(this,"form"))return!1;mt.event.add(this,"click._submit keypress._submit",function(t){var e=t.target,n=mt.nodeName(e,"input")||mt.nodeName(e,"button")?e.form:C;n&&!mt._data(n,"submitBubbles")&&(mt.event.add(n,"submit._submit",function(t){t._submit_bubble=!0}),mt._data(n,"submitBubbles",!0))})},postDispatch:function(t){t._submit_bubble&&(delete t._submit_bubble,this.parentNode&&!t.isTrigger&&mt.event.simulate("submit",this.parentNode,t,!0))},teardown:function(){if(mt.nodeName(this,"form"))return!1;mt.event.remove(this,"._submit")}}),mt.support.changeBubbles||(mt.event.special.change={setup:function(){if(G.test(this.nodeName))return"checkbox"!==this.type&&"radio"!==this.type||(mt.event.add(this,"propertychange._change",function(t){"checked"===t.originalEvent.propertyName&&(this._just_changed=!0)}),mt.event.add(this,"click._change",function(t){this._just_changed&&!t.isTrigger&&(this._just_changed=!1),mt.event.simulate("change",this,t,!0)})),!1;mt.event.add(this,"beforeactivate._change",function(t){var e=t.target;G.test(e.nodeName)&&!mt._data(e,"changeBubbles")&&(mt.event.add(e,"change._change",function(t){!this.parentNode||t.isSimulated||t.isTrigger||mt.event.simulate("change",this.parentNode,t,!0)}),mt._data(e,"changeBubbles",!0))})},handle:function(t){var e=t.target;if(this!==e||t.isSimulated||t.isTrigger||"radio"!==e.type&&"checkbox"!==e.type)return t.handleObj.handler.apply(this,arguments)},teardown:function(){return mt.event.remove(this,"._change"),!G.test(this.nodeName)}}),mt.support.focusinBubbles||mt.each({focus:"focusin",blur:"focusout"},function(t,e){var n=0,i=function(t){mt.event.simulate(e,t.target,mt.event.fix(t),!0)};mt.event.special[e]={setup:function(){0==n++&&g.addEventListener(t,i,!0)},teardown:function(){0==--n&&g.removeEventListener(t,i,!0)}}}),mt.fn.extend({on:function(t,e,n,i,o){var r,s;if("object"==typeof t){for(r in"string"!=typeof e&&(n=n||e,e=C),t)this.on(r,e,n,t[r],o);return this}if(null==n&&null==i?(i=e,n=e=C):null==i&&("string"==typeof e?(i=n,n=C):(i=n,n=e,e=C)),!1===i)i=it;else if(!i)return this;return 1===o&&(s=i,(i=function(t){return mt().off(t),s.apply(this,arguments)}).guid=s.guid||(s.guid=mt.guid++)),this.each(function(){mt.event.add(this,t,i,n,e)})},one:function(t,e,n,i){return this.on(t,e,n,i,1)},off:function(t,e,n){var i,o;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,mt(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"!=typeof t)return!1!==e&&"function"!=typeof e||(n=e,e=C),!1===n&&(n=it),this.each(function(){mt.event.remove(this,t,n,e)});for(o in t)this.off(o,e,t[o]);return this},bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)},trigger:function(t,e){return this.each(function(){mt.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return mt.event.trigger(t,e,n,!0)}}),function(n,t){var e,w,T,r,i,h,c,C,g,N,o,m,y,s,a,v,u,E="sizzle"+-new Date,b=n.document,x={},k=0,p=0,l=tt(),f=tt(),d=tt(),S="undefined",$=[],A=$.pop,D=$.push,j=$.slice,O=$.indexOf||function(t){for(var e=0,n=this.length;e<n;e++)if(this[e]===t)return e;return-1},L="[\\x20\\t\\r\\n\\f]",I="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",H=I.replace("w","w#"),R="\\["+L+"*("+I+")"+L+"*(?:([*^$|!~]?=)"+L+"*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|("+H+")|)|)"+L+"*\\]",_=":("+I+")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|"+R.replace(3,8)+")*)|.*)\\)|)",F=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),P=new RegExp("^"+L+"*,"+L+"*"),M=new RegExp("^"+L+"*([\\x20\\t\\r\\n\\f>+~])"+L+"*"),q=new RegExp(_),B=new RegExp("^"+H+"$"),W={ID:new RegExp("^#("+I+")"),CLASS:new RegExp("^\\.("+I+")"),NAME:new RegExp("^\\[name=['\"]?("+I+")['\"]?\\]"),TAG:new RegExp("^("+I.replace("w","w*")+")"),ATTR:new RegExp("^"+R),PSEUDO:new RegExp("^"+_),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},U=/[\x20\t\r\n\f]*[+~]/,z=/^[^{]+\{\s*\[native code/,X=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,V=/^(?:input|select|textarea|button)$/i,Q=/^h\d$/i,Y=/'|\\/g,J=/\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,G=/\\([\da-fA-F]{1,6}[\x20\t\r\n\f]?|.)/g,K=function(t,e){var n="0x"+e-65536;return n!=n?e:n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320)};try{j.call(b.documentElement.childNodes,0)[0].nodeType}catch(t){j=function(t){for(var e,n=[];e=this[t++];)n.push(e);return n}}function Z(t){return z.test(t+"")}function tt(){var n,i=[];return n=function(t,e){return i.push(t+=" ")>T.cacheLength&&delete n[i.shift()],n[t]=e}}function et(t){return t[E]=!0,t}function nt(t){var e=N.createElement("div");try{return t(e)}catch(t){return!1}finally{e=null}}function it(t,e,n,i){var o,r,s,a,l,c,u,p,f,d;if((e?e.ownerDocument||e:b)!==N&&g(e),n=n||[],!t||"string"!=typeof t)return n;if(1!==(a=(e=e||N).nodeType)&&9!==a)return[];if(!m&&!i){if(o=X.exec(t))if(s=o[1]){if(9===a){if(!(r=e.getElementById(s))||!r.parentNode)return n;if(r.id===s)return n.push(r),n}else if(e.ownerDocument&&(r=e.ownerDocument.getElementById(s))&&v(e,r)&&r.id===s)return n.push(r),n}else{if(o[2])return D.apply(n,j.call(e.getElementsByTagName(t),0)),n;if((s=o[3])&&x.getByClassName&&e.getElementsByClassName)return D.apply(n,j.call(e.getElementsByClassName(s),0)),n}if(x.qsa&&!y.test(t)){if(u=!0,p=E,f=e,d=9===a&&t,1===a&&"object"!==e.nodeName.toLowerCase()){for(c=lt(t),(u=e.getAttribute("id"))?p=u.replace(Y,"\\$&"):e.setAttribute("id",p),p="[id='"+p+"'] ",l=c.length;l--;)c[l]=p+ct(c[l]);f=U.test(t)&&e.parentNode||e,d=c.join(",")}if(d)try{return D.apply(n,j.call(f.querySelectorAll(d),0)),n}catch(t){}finally{u||e.removeAttribute("id")}}}return function(t,e,n,i){var o,r,s,a,l,c=lt(t);if(!i&&1===c.length){if(2<(r=c[0]=c[0].slice(0)).length&&"ID"===(s=r[0]).type&&9===e.nodeType&&!m&&T.relative[r[1].type]){if(!(e=T.find.ID(s.matches[0].replace(G,K),e)[0]))return n;t=t.slice(r.shift().value.length)}for(o=W.needsContext.test(t)?0:r.length;o--&&(s=r[o],!T.relative[a=s.type]);)if((l=T.find[a])&&(i=l(s.matches[0].replace(G,K),U.test(r[0].type)&&e.parentNode||e))){if(r.splice(o,1),!(t=i.length&&ct(r)))return D.apply(n,j.call(i,0)),n;break}}return h(t,c)(i,e,m,n,U.test(t)),n}(t.replace(F,"$1"),e,n,i)}function ot(t,e){var n=e&&t,i=n&&(~e.sourceIndex||1<<31)-(~t.sourceIndex||1<<31);if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function rt(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function st(n){return function(t){var e=t.nodeName.toLowerCase();return("input"===e||"button"===e)&&t.type===n}}function at(s){return et(function(r){return r=+r,et(function(t,e){for(var n,i=s([],t.length,r),o=i.length;o--;)t[n=i[o]]&&(t[n]=!(e[n]=t[n]))})})}for(e in i=it.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},g=it.setDocument=function(t){var l=t?t.ownerDocument||t:b;return l!==N&&9===l.nodeType&&l.documentElement&&(o=(N=l).documentElement,m=i(l),x.tagNameNoComments=nt(function(t){return t.appendChild(l.createComment("")),!t.getElementsByTagName("*").length}),x.attributes=nt(function(t){t.innerHTML="<select></select>";var e=typeof t.lastChild.getAttribute("multiple");return"boolean"!==e&&"string"!==e}),x.getByClassName=nt(function(t){return t.innerHTML="<div class='hidden e'></div><div class='hidden'></div>",!(!t.getElementsByClassName||!t.getElementsByClassName("e").length)&&(t.lastChild.className="e",2===t.getElementsByClassName("e").length)}),x.getByName=nt(function(t){t.id=E+0,t.innerHTML="<a name='"+E+"'></a><div name='"+E+"'></div>",o.insertBefore(t,o.firstChild);var e=l.getElementsByName&&l.getElementsByName(E).length===2+l.getElementsByName(E+0).length;return x.getIdNotName=!l.getElementById(E),o.removeChild(t),e}),T.attrHandle=nt(function(t){return t.innerHTML="<a href='#'></a>",t.firstChild&&typeof t.firstChild.getAttribute!==S&&"#"===t.firstChild.getAttribute("href")})?{}:{href:function(t){return t.getAttribute("href",2)},type:function(t){return t.getAttribute("type")}},x.getIdNotName?(T.find.ID=function(t,e){if(typeof e.getElementById!==S&&!m){var n=e.getElementById(t);return n&&n.parentNode?[n]:[]}},T.filter.ID=function(t){var e=t.replace(G,K);return function(t){return t.getAttribute("id")===e}}):(T.find.ID=function(t,e){if(typeof e.getElementById!==S&&!m){var n=e.getElementById(t);return n?n.id===t||typeof n.getAttributeNode!==S&&n.getAttributeNode("id").value===t?[n]:void 0:[]}},T.filter.ID=function(t){var n=t.replace(G,K);return function(t){var e=typeof t.getAttributeNode!==S&&t.getAttributeNode("id");return e&&e.value===n}}),T.find.TAG=x.tagNameNoComments?function(t,e){if(typeof e.getElementsByTagName!==S)return e.getElementsByTagName(t)}:function(t,e){var n,i=[],o=0,r=e.getElementsByTagName(t);if("*"!==t)return r;for(;n=r[o++];)1===n.nodeType&&i.push(n);return i},T.find.NAME=x.getByName&&function(t,e){if(typeof e.getElementsByName!==S)return e.getElementsByName(name)},T.find.CLASS=x.getByClassName&&function(t,e){if(typeof e.getElementsByClassName!==S&&!m)return e.getElementsByClassName(t)},s=[],y=[":focus"],(x.qsa=Z(l.querySelectorAll))&&(nt(function(t){t.innerHTML="<select><option selected=''></option></select>",t.querySelectorAll("[selected]").length||y.push("\\["+L+"*(?:checked|disabled|ismap|multiple|readonly|selected|value)"),t.querySelectorAll(":checked").length||y.push(":checked")}),nt(function(t){t.innerHTML="<input type='hidden' i=''/>",t.querySelectorAll("[i^='']").length&&y.push("[*^$]="+L+"*(?:\"\"|'')"),t.querySelectorAll(":enabled").length||y.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),y.push(",.*:")})),(x.matchesSelector=Z(a=o.matchesSelector||o.mozMatchesSelector||o.webkitMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&nt(function(t){x.disconnectedMatch=a.call(t,"div"),a.call(t,"[s!='']:x"),s.push("!=",_)}),y=new RegExp(y.join("|")),s=new RegExp(s.join("|")),v=Z(o.contains)||o.compareDocumentPosition?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},u=o.compareDocumentPosition?function(t,e){var n;return t===e?(c=!0,0):(n=e.compareDocumentPosition&&t.compareDocumentPosition&&t.compareDocumentPosition(e))?1&n||t.parentNode&&11===t.parentNode.nodeType?t===l||v(b,t)?-1:e===l||v(b,e)?1:0:4&n?-1:1:t.compareDocumentPosition?-1:1}:function(t,e){var n,i=0,o=t.parentNode,r=e.parentNode,s=[t],a=[e];if(t===e)return c=!0,0;if(!o||!r)return t===l?-1:e===l?1:o?-1:r?1:0;if(o===r)return ot(t,e);for(n=t;n=n.parentNode;)s.unshift(n);for(n=e;n=n.parentNode;)a.unshift(n);for(;s[i]===a[i];)i++;return i?ot(s[i],a[i]):s[i]===b?-1:a[i]===b?1:0},c=!1,[0,0].sort(u),x.detectDuplicates=c),N},it.matches=function(t,e){return it(t,null,null,e)},it.matchesSelector=function(t,e){if((t.ownerDocument||t)!==N&&g(t),e=e.replace(J,"='$1']"),x.matchesSelector&&!m&&(!s||!s.test(e))&&!y.test(e))try{var n=a.call(t,e);if(n||x.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(t){}return 0<it(e,N,null,[t]).length},it.contains=function(t,e){return(t.ownerDocument||t)!==N&&g(t),v(t,e)},it.attr=function(t,e){var n;return(t.ownerDocument||t)!==N&&g(t),m||(e=e.toLowerCase()),(n=T.attrHandle[e])?n(t):m||x.attributes?t.getAttribute(e):((n=t.getAttributeNode(e))||t.getAttribute(e))&&!0===t[e]?e:n&&n.specified?n.value:null},it.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},it.uniqueSort=function(t){var e,n=[],i=1,o=0;if(c=!x.detectDuplicates,t.sort(u),c){for(;e=t[i];i++)e===t[i-1]&&(o=n.push(i));for(;o--;)t.splice(n[o],1)}return t},r=it.getText=function(t){var e,n="",i=0,o=t.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=r(t)}else if(3===o||4===o)return t.nodeValue}else for(;e=t[i];i++)n+=r(e);return n},T=it.selectors={cacheLength:50,createPseudo:et,match:W,find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(G,K),t[3]=(t[4]||t[5]||"").replace(G,K),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||it.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&it.error(t[0]),t},PSEUDO:function(t){var e,n=!t[5]&&t[2];return W.CHILD.test(t[0])?null:(t[4]?t[2]=t[4]:n&&q.test(n)&&(e=lt(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(e){return"*"===e?function(){return!0}:(e=e.replace(G,K).toLowerCase(),function(t){return t.nodeName&&t.nodeName.toLowerCase()===e})},CLASS:function(t){var e=l[t+" "];return e||(e=new RegExp("(^|"+L+")"+t+"("+L+"|$)"))&&l(t,function(t){return e.test(t.className||typeof t.getAttribute!==S&&t.getAttribute("class")||"")})},ATTR:function(n,i,o){return function(t){var e=it.attr(t,n);return null==e?"!="===i:!i||(e+="","="===i?e===o:"!="===i?e!==o:"^="===i?o&&0===e.indexOf(o):"*="===i?o&&-1<e.indexOf(o):"$="===i?o&&e.slice(-o.length)===o:"~="===i?-1<(" "+e+" ").indexOf(o):"|="===i&&(e===o||e.slice(0,o.length+1)===o+"-"))}},CHILD:function(d,t,e,h,g){var m="nth"!==d.slice(0,3),y="last"!==d.slice(-4),v="of-type"===t;return 1===h&&0===g?function(t){return!!t.parentNode}:function(t,e,n){var i,o,r,s,a,l,c=m!==y?"nextSibling":"previousSibling",u=t.parentNode,p=v&&t.nodeName.toLowerCase(),f=!n&&!v;if(u){if(m){for(;c;){for(r=t;r=r[c];)if(v?r.nodeName.toLowerCase()===p:1===r.nodeType)return!1;l=c="only"===d&&!l&&"nextSibling"}return!0}if(l=[y?u.firstChild:u.lastChild],y&&f){for(a=(i=(o=u[E]||(u[E]={}))[d]||[])[0]===k&&i[1],s=i[0]===k&&i[2],r=a&&u.childNodes[a];r=++a&&r&&r[c]||(s=a=0)||l.pop();)if(1===r.nodeType&&++s&&r===t){o[d]=[k,a,s];break}}else if(f&&(i=(t[E]||(t[E]={}))[d])&&i[0]===k)s=i[1];else for(;(r=++a&&r&&r[c]||(s=a=0)||l.pop())&&((v?r.nodeName.toLowerCase()!==p:1!==r.nodeType)||!++s||(f&&((r[E]||(r[E]={}))[d]=[k,s]),r!==t)););return(s-=g)===h||s%h==0&&0<=s/h}}},PSEUDO:function(t,r){var e,s=T.pseudos[t]||T.setFilters[t.toLowerCase()]||it.error("unsupported pseudo: "+t);return s[E]?s(r):1<s.length?(e=[t,t,"",r],T.setFilters.hasOwnProperty(t.toLowerCase())?et(function(t,e){for(var n,i=s(t,r),o=i.length;o--;)t[n=O.call(t,i[o])]=!(e[n]=i[o])}):function(t){return s(t,0,e)}):s}},pseudos:{not:et(function(t){var i=[],o=[],a=h(t.replace(F,"$1"));return a[E]?et(function(t,e,n,i){for(var o,r=a(t,null,i,[]),s=t.length;s--;)(o=r[s])&&(t[s]=!(e[s]=o))}):function(t,e,n){return i[0]=t,a(i,null,n,o),!o.pop()}}),has:et(function(e){return function(t){return 0<it(e,t).length}}),contains:et(function(e){return function(t){return-1<(t.textContent||t.innerText||r(t)).indexOf(e)}}),lang:et(function(n){return B.test(n||"")||it.error("unsupported lang: "+n),n=n.replace(G,K).toLowerCase(),function(t){var e;do{if(e=m?t.getAttribute("xml:lang")||t.getAttribute("lang"):t.lang)return(e=e.toLowerCase())===n||0===e.indexOf(n+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var e=n.location&&n.location.hash;return e&&e.slice(1)===t.id},root:function(t){return t===o},focus:function(t){return t===N.activeElement&&(!N.hasFocus||N.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:function(t){return!1===t.disabled},disabled:function(t){return!0===t.disabled},checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if("@"<t.nodeName||3===t.nodeType||4===t.nodeType)return!1;return!0},parent:function(t){return!T.pseudos.empty(t)},header:function(t){return Q.test(t.nodeName)},input:function(t){return V.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||e.toLowerCase()===t.type)},first:at(function(){return[0]}),last:at(function(t,e){return[e-1]}),eq:at(function(t,e,n){return[n<0?n+e:n]}),even:at(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:at(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:at(function(t,e,n){for(var i=n<0?n+e:n;0<=--i;)t.push(i);return t}),gt:at(function(t,e,n){for(var i=n<0?n+e:n;++i<e;)t.push(i);return t})}},{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})T.pseudos[e]=rt(e);for(e in{submit:!0,reset:!0})T.pseudos[e]=st(e);function lt(t,e){var n,i,o,r,s,a,l,c=f[t+" "];if(c)return e?0:c.slice(0);for(s=t,a=[],l=T.preFilter;s;){for(r in n&&!(i=P.exec(s))||(i&&(s=s.slice(i[0].length)||s),a.push(o=[])),n=!1,(i=M.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(F," ")}),s=s.slice(n.length)),T.filter)!(i=W[r].exec(s))||l[r]&&!(i=l[r](i))||(n=i.shift(),o.push({value:n,type:r,matches:i}),s=s.slice(n.length));if(!n)break}return e?s.length:s?it.error(t):f(t,a).slice(0)}function ct(t){for(var e=0,n=t.length,i="";e<n;e++)i+=t[e].value;return i}function ut(a,t,e){var l=t.dir,c=e&&"parentNode"===l,u=p++;return t.first?function(t,e,n){for(;t=t[l];)if(1===t.nodeType||c)return a(t,e,n)}:function(t,e,n){var i,o,r,s=k+" "+u;if(n){for(;t=t[l];)if((1===t.nodeType||c)&&a(t,e,n))return!0}else for(;t=t[l];)if(1===t.nodeType||c)if((o=(r=t[E]||(t[E]={}))[l])&&o[0]===s){if(!0===(i=o[1])||i===w)return!0===i}else if((o=r[l]=[s])[1]=a(t,e,n)||w,!0===o[1])return!0}}function pt(o){return 1<o.length?function(t,e,n){for(var i=o.length;i--;)if(!o[i](t,e,n))return!1;return!0}:o[0]}function ft(t,e,n,i,o){for(var r,s=[],a=0,l=t.length,c=null!=e;a<l;a++)(r=t[a])&&(n&&!n(r,i,o)||(s.push(r),c&&e.push(a)));return s}function dt(d,h,g,m,y,t){return m&&!m[E]&&(m=dt(m)),y&&!y[E]&&(y=dt(y,t)),et(function(t,e,n,i){var o,r,s,a=[],l=[],c=e.length,u=t||function(t,e,n){for(var i=0,o=e.length;i<o;i++)it(t,e[i],n);return n}(h||"*",n.nodeType?[n]:n,[]),p=!d||!t&&h?u:ft(u,a,d,n,i),f=g?y||(t?d:c||m)?[]:e:p;if(g&&g(p,f,n,i),m)for(o=ft(f,l),m(o,[],n,i),r=o.length;r--;)(s=o[r])&&(f[l[r]]=!(p[l[r]]=s));if(t){if(y||d){if(y){for(o=[],r=f.length;r--;)(s=f[r])&&o.push(p[r]=s);y(null,f=[],o,i)}for(r=f.length;r--;)(s=f[r])&&-1<(o=y?O.call(t,s):a[r])&&(t[o]=!(e[o]=s))}}else f=ft(f===e?f.splice(c,f.length):f),y?y(null,e,f,i):D.apply(e,f)})}function ht(t){for(var i,e,n,o=t.length,r=T.relative[t[0].type],s=r||T.relative[" "],a=r?1:0,l=ut(function(t){return t===i},s,!0),c=ut(function(t){return-1<O.call(i,t)},s,!0),u=[function(t,e,n){return!r&&(n||e!==C)||((i=e).nodeType?l(t,e,n):c(t,e,n))}];a<o;a++)if(e=T.relative[t[a].type])u=[ut(pt(u),e)];else{if((e=T.filter[t[a].type].apply(null,t[a].matches))[E]){for(n=++a;n<o&&!T.relative[t[n].type];n++);return dt(1<a&&pt(u),1<a&&ct(t.slice(0,a-1)).replace(F,"$1"),e,a<n&&ht(t.slice(a,n)),n<o&&ht(t=t.slice(n)),n<o&&ct(t))}u.push(e)}return pt(u)}function gt(){}h=it.compile=function(t,e){var n,m,y,v,b,x,i,o=[],r=[],s=d[t+" "];if(!s){for(e||(e=lt(t)),n=e.length;n--;)(s=ht(e[n]))[E]?o.push(s):r.push(s);s=d(t,(m=r,b=(v=0)<(y=o).length,x=0<m.length,i=function(t,e,n,i,o){var r,s,a,l=[],c=0,u="0",p=t&&[],f=null!=o,d=C,h=t||x&&T.find.TAG("*",o&&e.parentNode||e),g=k+=null==d?1:Math.random()||.1;for(f&&(C=e!==N&&e,w=v);null!=(r=h[u]);u++){if(x&&r){for(s=0;a=m[s++];)if(a(r,e,n)){i.push(r);break}f&&(k=g,w=++v)}b&&((r=!a&&r)&&c--,t&&p.push(r))}if(c+=u,b&&u!==c){for(s=0;a=y[s++];)a(p,l,e,n);if(t){if(0<c)for(;u--;)p[u]||l[u]||(l[u]=A.call(i));l=ft(l)}D.apply(i,l),f&&!t&&0<l.length&&1<c+y.length&&it.uniqueSort(i)}return f&&(k=g,C=d),p},b?et(i):i))}return s},T.pseudos.nth=T.pseudos.eq,T.filters=gt.prototype=T.pseudos,T.setFilters=new gt,g(),it.attr=mt.attr,mt.find=it,mt.expr=it.selectors,mt.expr[":"]=mt.expr.pseudos,mt.unique=it.uniqueSort,mt.text=it.getText,mt.isXMLDoc=it.isXML,mt.contains=it.contains}(h);var ot=/Until$/,rt=/^(?:parents|prev(?:Until|All))/,st=/^.[^:#\[\.,]*$/,at=mt.expr.match.needsContext,lt={children:!0,contents:!0,next:!0,prev:!0};function ct(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function ut(t,n,i){if(n=n||0,mt.isFunction(n))return mt.grep(t,function(t,e){return!!n.call(t,e,t)===i});if(n.nodeType)return mt.grep(t,function(t){return t===n===i});if("string"==typeof n){var e=mt.grep(t,function(t){return 1===t.nodeType});if(st.test(n))return mt.filter(n,e,!i);n=mt.filter(n,e)}return mt.grep(t,function(t){return 0<=mt.inArray(t,n)===i})}function pt(t){var e=ft.split("|"),n=t.createDocumentFragment();if(n.createElement)for(;e.length;)n.createElement(e.pop());return n}mt.fn.extend({find:function(t){var e,n,i,o=this.length;if("string"!=typeof t)return(i=this).pushStack(mt(t).filter(function(){for(e=0;e<o;e++)if(mt.contains(i[e],this))return!0}));for(n=[],e=0;e<o;e++)mt.find(t,this[e],n);return(n=this.pushStack(1<o?mt.unique(n):n)).selector=(this.selector?this.selector+" ":"")+t,n},has:function(t){var e,n=mt(t,this),i=n.length;return this.filter(function(){for(e=0;e<i;e++)if(mt.contains(this,n[e]))return!0})},not:function(t){return this.pushStack(ut(this,t,!1))},filter:function(t){return this.pushStack(ut(this,t,!0))},is:function(t){return!!t&&("string"==typeof t?at.test(t)?0<=mt(t,this.context).index(this[0]):0<mt.filter(t,this).length:0<this.filter(t).length)},closest:function(t,e){for(var n,i=0,o=this.length,r=[],s=at.test(t)||"string"!=typeof t?mt(t,e||this.context):0;i<o;i++)for(n=this[i];n&&n.ownerDocument&&n!==e&&11!==n.nodeType;){if(s?-1<s.index(n):mt.find.matchesSelector(n,t)){r.push(n);break}n=n.parentNode}return this.pushStack(1<r.length?mt.unique(r):r)},index:function(t){return t?"string"==typeof t?mt.inArray(this[0],mt(t)):mt.inArray(t.jquery?t[0]:t,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){var n="string"==typeof t?mt(t,e):mt.makeArray(t&&t.nodeType?[t]:t),i=mt.merge(this.get(),n);return this.pushStack(mt.unique(i))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),mt.fn.andSelf=mt.fn.addBack,mt.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return mt.dir(t,"parentNode")},parentsUntil:function(t,e,n){return mt.dir(t,"parentNode",n)},next:function(t){return ct(t,"nextSibling")},prev:function(t){return ct(t,"previousSibling")},nextAll:function(t){return mt.dir(t,"nextSibling")},prevAll:function(t){return mt.dir(t,"previousSibling")},nextUntil:function(t,e,n){return mt.dir(t,"nextSibling",n)},prevUntil:function(t,e,n){return mt.dir(t,"previousSibling",n)},siblings:function(t){return mt.sibling((t.parentNode||{}).firstChild,t)},children:function(t){return mt.sibling(t.firstChild)},contents:function(t){return mt.nodeName(t,"iframe")?t.contentDocument||t.contentWindow.document:mt.merge([],t.childNodes)}},function(i,o){mt.fn[i]=function(t,e){var n=mt.map(this,o,t);return ot.test(i)||(e=t),e&&"string"==typeof e&&(n=mt.filter(e,n)),n=1<this.length&&!lt[i]?mt.unique(n):n,1<this.length&&rt.test(i)&&(n=n.reverse()),this.pushStack(n)}}),mt.extend({filter:function(t,e,n){return n&&(t=":not("+t+")"),1===e.length?mt.find.matchesSelector(e[0],t)?[e[0]]:[]:mt.find.matches(t,e)},dir:function(t,e,n){for(var i=[],o=t[e];o&&9!==o.nodeType&&(n===C||1!==o.nodeType||!mt(o).is(n));)1===o.nodeType&&i.push(o),o=o[e];return i},sibling:function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n}});var ft="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",dt=/ jQuery\d+="(?:null|\d+)"/g,ht=new RegExp("<(?:"+ft+")[\\s/>]","i"),gt=/^\s+/,yt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,vt=/<([\w:]+)/,bt=/<tbody/i,xt=/<|&#?\w+;/,wt=/<(?:script|style|link)/i,Tt=/^(?:checkbox|radio)$/i,Ct=/checked\s*(?:[^=]|=\s*.checked.)/i,Nt=/^$|\/(?:java|ecma)script/i,Et=/^true\/(.*)/,kt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,St={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:mt.support.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]},$t=pt(g).appendChild(g.createElement("div"));function At(t){var e=t.getAttributeNode("type");return t.type=(e&&e.specified)+"/"+t.type,t}function Dt(t){var e=Et.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function jt(t,e){for(var n,i=0;null!=(n=t[i]);i++)mt._data(n,"globalEval",!e||mt._data(e[i],"globalEval"))}function Ot(t,e){if(1===e.nodeType&&mt.hasData(t)){var n,i,o,r=mt._data(t),s=mt._data(e,r),a=r.events;if(a)for(n in delete s.handle,s.events={},a)for(i=0,o=a[n].length;i<o;i++)mt.event.add(e,n,a[n][i]);s.data&&(s.data=mt.extend({},s.data))}}function Lt(t,e){var n,i,o;if(1===e.nodeType){if(n=e.nodeName.toLowerCase(),!mt.support.noCloneEvent&&e[mt.expando]){for(i in(o=mt._data(e)).events)mt.removeEvent(e,i,o.handle);e.removeAttribute(mt.expando)}"script"===n&&e.text!==t.text?(At(e).text=t.text,Dt(e)):"object"===n?(e.parentNode&&(e.outerHTML=t.outerHTML),mt.support.html5Clone&&t.innerHTML&&!mt.trim(e.innerHTML)&&(e.innerHTML=t.innerHTML)):"input"===n&&Tt.test(t.type)?(e.defaultChecked=e.checked=t.checked,e.value!==t.value&&(e.value=t.value)):"option"===n?e.defaultSelected=e.selected=t.defaultSelected:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}}function It(t,e){var n,i,o=0,r=typeof t.getElementsByTagName!==y?t.getElementsByTagName(e||"*"):typeof t.querySelectorAll!==y?t.querySelectorAll(e||"*"):C;if(!r)for(r=[],n=t.childNodes||t;null!=(i=n[o]);o++)!e||mt.nodeName(i,e)?r.push(i):mt.merge(r,It(i,e));return e===C||e&&mt.nodeName(t,e)?mt.merge([t],r):r}function Ht(t){Tt.test(t.type)&&(t.defaultChecked=t.checked)}St.optgroup=St.option,St.tbody=St.tfoot=St.colgroup=St.caption=St.thead,St.th=St.td,mt.fn.extend({text:function(t){return mt.access(this,function(t){return t===C?mt.text(this):this.empty().append((this[0]&&this[0].ownerDocument||g).createTextNode(t))},null,t,arguments.length)},wrapAll:function(e){if(mt.isFunction(e))return this.each(function(t){mt(this).wrapAll(e.call(this,t))});if(this[0]){var t=mt(e,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var t=this;t.firstChild&&1===t.firstChild.nodeType;)t=t.firstChild;return t}).append(this)}return this},wrapInner:function(n){return mt.isFunction(n)?this.each(function(t){mt(this).wrapInner(n.call(this,t))}):this.each(function(){var t=mt(this),e=t.contents();e.length?e.wrapAll(n):t.append(n)})},wrap:function(e){var n=mt.isFunction(e);return this.each(function(t){mt(this).wrapAll(n?e.call(this,t):e)})},unwrap:function(){return this.parent().each(function(){mt.nodeName(this,"body")||mt(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||this.appendChild(t)})},prepend:function(){return this.domManip(arguments,!0,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||this.insertBefore(t,this.firstChild)})},before:function(){return this.domManip(arguments,!1,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return this.domManip(arguments,!1,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},remove:function(t,e){for(var n,i=0;null!=(n=this[i]);i++)(!t||0<mt.filter(t,[n]).length)&&(e||1!==n.nodeType||mt.cleanData(It(n)),n.parentNode&&(e&&mt.contains(n.ownerDocument,n)&&jt(It(n,"script")),n.parentNode.removeChild(n)));return this},empty:function(){for(var t,e=0;null!=(t=this[e]);e++){for(1===t.nodeType&&mt.cleanData(It(t,!1));t.firstChild;)t.removeChild(t.firstChild);t.options&&mt.nodeName(t,"select")&&(t.options.length=0)}return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return mt.clone(this,t,e)})},html:function(t){return mt.access(this,function(t){var e=this[0]||{},n=0,i=this.length;if(t===C)return 1===e.nodeType?e.innerHTML.replace(dt,""):C;if("string"==typeof t&&!wt.test(t)&&(mt.support.htmlSerialize||!ht.test(t))&&(mt.support.leadingWhitespace||!gt.test(t))&&!St[(vt.exec(t)||["",""])[1].toLowerCase()]){t=t.replace(yt,"<$1></$2>");try{for(;n<i;n++)1===(e=this[n]||{}).nodeType&&(mt.cleanData(It(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(t){return mt.isFunction(t)||"string"==typeof t||(t=mt(t).not(this).detach()),this.domManip([t],!0,function(t){var e=this.nextSibling,n=this.parentNode;n&&(mt(this).remove(),n.insertBefore(t,e))})},detach:function(t){return this.remove(t,!0)},domManip:function(n,i,o){n=v.apply([],n);var t,e,r,s,a,l,c,u,p=0,f=this.length,d=this,h=f-1,g=n[0],m=mt.isFunction(g);if(m||!(f<=1||"string"!=typeof g||mt.support.checkClone)&&Ct.test(g))return this.each(function(t){var e=d.eq(t);m&&(n[0]=g.call(this,t,i?e.html():C)),e.domManip(n,i,o)});if(f&&(t=(l=mt.buildFragment(n,this[0].ownerDocument,!1,this)).firstChild,1===l.childNodes.length&&(l=t),t)){for(i=i&&mt.nodeName(t,"tr"),r=(s=mt.map(It(l,"script"),At)).length;p<f;p++)e=l,p!==h&&(e=mt.clone(e,!0,!0),r&&mt.merge(s,It(e,"script"))),o.call(i&&mt.nodeName(this[p],"table")?(c=this[p],u="tbody",c.getElementsByTagName(u)[0]||c.appendChild(c.ownerDocument.createElement(u))):this[p],e,p);if(r)for(a=s[s.length-1].ownerDocument,mt.map(s,Dt),p=0;p<r;p++)e=s[p],Nt.test(e.type||"")&&!mt._data(e,"globalEval")&&mt.contains(a,e)&&(e.src?mt.ajax({url:e.src,type:"GET",dataType:"script",async:!1,global:!1,throws:!0}):mt.globalEval((e.text||e.textContent||e.innerHTML||"").replace(kt,"")));l=t=null}return this}}),mt.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,s){mt.fn[t]=function(t){for(var e,n=0,i=[],o=mt(t),r=o.length-1;n<=r;n++)e=n===r?this:this.clone(!0),mt(o[n])[s](e),a.apply(i,e.get());return this.pushStack(i)}}),mt.extend({clone:function(t,e,n){var i,o,r,s,a,l=mt.contains(t.ownerDocument,t);if(mt.support.html5Clone||mt.isXMLDoc(t)||!ht.test("<"+t.nodeName+">")?r=t.cloneNode(!0):($t.innerHTML=t.outerHTML,$t.removeChild(r=$t.firstChild)),!(mt.support.noCloneEvent&&mt.support.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||mt.isXMLDoc(t)))for(i=It(r),a=It(t),s=0;null!=(o=a[s]);++s)i[s]&&Lt(o,i[s]);if(e)if(n)for(a=a||It(t),i=i||It(r),s=0;null!=(o=a[s]);s++)Ot(o,i[s]);else Ot(t,r);return 0<(i=It(r,"script")).length&&jt(i,!l&&It(t,"script")),i=a=o=null,r},buildFragment:function(t,e,n,i){for(var o,r,s,a,l,c,u,p=t.length,f=pt(e),d=[],h=0;h<p;h++)if((r=t[h])||0===r)if("object"===mt.type(r))mt.merge(d,r.nodeType?[r]:r);else if(xt.test(r)){for(a=a||f.appendChild(e.createElement("div")),l=(vt.exec(r)||["",""])[1].toLowerCase(),u=St[l]||St._default,a.innerHTML=u[1]+r.replace(yt,"<$1></$2>")+u[2],o=u[0];o--;)a=a.lastChild;if(!mt.support.leadingWhitespace&&gt.test(r)&&d.push(e.createTextNode(gt.exec(r)[0])),!mt.support.tbody)for(o=(r="table"!==l||bt.test(r)?"<table>"!==u[1]||bt.test(r)?0:a:a.firstChild)&&r.childNodes.length;o--;)mt.nodeName(c=r.childNodes[o],"tbody")&&!c.childNodes.length&&r.removeChild(c);for(mt.merge(d,a.childNodes),a.textContent="";a.firstChild;)a.removeChild(a.firstChild);a=f.lastChild}else d.push(e.createTextNode(r));for(a&&f.removeChild(a),mt.support.appendChecked||mt.grep(It(d,"input"),Ht),h=0;r=d[h++];)if((!i||-1===mt.inArray(r,i))&&(s=mt.contains(r.ownerDocument,r),a=It(f.appendChild(r),"script"),s&&jt(a),n))for(o=0;r=a[o++];)Nt.test(r.type||"")&&n.push(r);return a=null,f},cleanData:function(t,e){for(var n,i,o,r,s=0,a=mt.expando,l=mt.cache,c=mt.support.deleteExpando,u=mt.event.special;null!=(n=t[s]);s++)if((e||mt.acceptData(n))&&(r=(o=n[a])&&l[o])){if(r.events)for(i in r.events)u[i]?mt.event.remove(n,i):mt.removeEvent(n,i,r.handle);l[o]&&(delete l[o],c?delete n[a]:typeof n.removeAttribute!==y?n.removeAttribute(a):n[a]=null,p.push(o))}}});var Rt,_t,Ft,Pt=/alpha\([^)]*\)/i,Mt=/opacity\s*=\s*([^)]*)/,qt=/^(top|right|bottom|left)$/,Bt=/^(none|table(?!-c[ea]).+)/,Wt=/^margin/,Ut=new RegExp("^("+d+")(.*)$","i"),zt=new RegExp("^("+d+")(?!px)[a-z%]+$","i"),Xt=new RegExp("^([+-])=("+d+")","i"),Vt={BODY:"block"},Qt={position:"absolute",visibility:"hidden",display:"block"},Yt={letterSpacing:0,fontWeight:400},Jt=["Top","Right","Bottom","Left"],Gt=["Webkit","O","Moz","ms"];function Kt(t,e){if(e in t)return e;for(var n=e.charAt(0).toUpperCase()+e.slice(1),i=e,o=Gt.length;o--;)if((e=Gt[o]+n)in t)return e;return i}function Zt(t,e){return t=e||t,"none"===mt.css(t,"display")||!mt.contains(t.ownerDocument,t)}function te(t,e){for(var n,i,o,r=[],s=0,a=t.length;s<a;s++)(i=t[s]).style&&(r[s]=mt._data(i,"olddisplay"),n=i.style.display,e?(r[s]||"none"!==n||(i.style.display=""),""===i.style.display&&Zt(i)&&(r[s]=mt._data(i,"olddisplay",oe(i.nodeName)))):r[s]||(o=Zt(i),(n&&"none"!==n||!o)&&mt._data(i,"olddisplay",o?n:mt.css(i,"display"))));for(s=0;s<a;s++)(i=t[s]).style&&(e&&"none"!==i.style.display&&""!==i.style.display||(i.style.display=e?r[s]||"":"none"));return t}function ee(t,e,n){var i=Ut.exec(e);return i?Math.max(0,i[1]-(n||0))+(i[2]||"px"):e}function ne(t,e,n,i,o){for(var r=n===(i?"border":"content")?4:"width"===e?1:0,s=0;r<4;r+=2)"margin"===n&&(s+=mt.css(t,n+Jt[r],!0,o)),i?("content"===n&&(s-=mt.css(t,"padding"+Jt[r],!0,o)),"margin"!==n&&(s-=mt.css(t,"border"+Jt[r]+"Width",!0,o))):(s+=mt.css(t,"padding"+Jt[r],!0,o),"padding"!==n&&(s+=mt.css(t,"border"+Jt[r]+"Width",!0,o)));return s}function ie(t,e,n){var i=!0,o="width"===e?t.offsetWidth:t.offsetHeight,r=_t(t),s=mt.support.boxSizing&&"border-box"===mt.css(t,"boxSizing",!1,r);if(o<=0||null==o){if(((o=Ft(t,e,r))<0||null==o)&&(o=t.style[e]),zt.test(o))return o;i=s&&(mt.support.boxSizingReliable||o===t.style[e]),o=parseFloat(o)||0}return o+ne(t,e,n||(s?"border":"content"),i,r)+"px"}function oe(t){var e=g,n=Vt[t];return n||("none"!==(n=re(t,e))&&n||((e=((Rt=(Rt||mt("<iframe frameborder='0' width='0' height='0'/>").css("cssText","display:block !important")).appendTo(e.documentElement))[0].contentWindow||Rt[0].contentDocument).document).write("<!doctype html><html><body>"),e.close(),n=re(t,e),Rt.detach()),Vt[t]=n),n}function re(t,e){var n=mt(e.createElement(t)).appendTo(e.body),i=mt.css(n[0],"display");return n.remove(),i}mt.fn.extend({css:function(t,e){return mt.access(this,function(t,e,n){var i,o,r={},s=0;if(mt.isArray(e)){for(o=_t(t),i=e.length;s<i;s++)r[e[s]]=mt.css(t,e[s],!1,o);return r}return n!==C?mt.style(t,e,n):mt.css(t,e)},t,e,1<arguments.length)},show:function(){return te(this,!0)},hide:function(){return te(this)},toggle:function(t){var e="boolean"==typeof t;return this.each(function(){(e?t:Zt(this))?mt(this).show():mt(this).hide()})}}),mt.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=Ft(t,"opacity");return""===n?"1":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:mt.support.cssFloat?"cssFloat":"styleFloat"},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var o,r,s,a=mt.camelCase(e),l=t.style;if(e=mt.cssProps[a]||(mt.cssProps[a]=Kt(l,a)),s=mt.cssHooks[e]||mt.cssHooks[a],n===C)return s&&"get"in s&&(o=s.get(t,!1,i))!==C?o:l[e];if(!("string"===(r=typeof n)&&(o=Xt.exec(n))&&(n=(o[1]+1)*o[2]+parseFloat(mt.css(t,e)),r="number"),null==n||"number"===r&&isNaN(n)||("number"!==r||mt.cssNumber[a]||(n+="px"),mt.support.clearCloneStyle||""!==n||0!==e.indexOf("background")||(l[e]="inherit"),s&&"set"in s&&(n=s.set(t,n,i))===C)))try{l[e]=n}catch(t){}}},css:function(t,e,n,i){var o,r,s,a=mt.camelCase(e);return e=mt.cssProps[a]||(mt.cssProps[a]=Kt(t.style,a)),(s=mt.cssHooks[e]||mt.cssHooks[a])&&"get"in s&&(r=s.get(t,!0,n)),r===C&&(r=Ft(t,e,i)),"normal"===r&&e in Yt&&(r=Yt[e]),""===n||n?(o=parseFloat(r),!0===n||mt.isNumeric(o)?o||0:r):r},swap:function(t,e,n,i){var o,r,s={};for(r in e)s[r]=t.style[r],t.style[r]=e[r];for(r in o=n.apply(t,i||[]),e)t.style[r]=s[r];return o}}),h.getComputedStyle?(_t=function(t){return h.getComputedStyle(t,null)},Ft=function(t,e,n){var i,o,r,s=n||_t(t),a=s?s.getPropertyValue(e)||s[e]:C,l=t.style;return s&&(""!==a||mt.contains(t.ownerDocument,t)||(a=mt.style(t,e)),zt.test(a)&&Wt.test(e)&&(i=l.width,o=l.minWidth,r=l.maxWidth,l.minWidth=l.maxWidth=l.width=a,a=s.width,l.width=i,l.minWidth=o,l.maxWidth=r)),a}):g.documentElement.currentStyle&&(_t=function(t){return t.currentStyle},Ft=function(t,e,n){var i,o,r,s=n||_t(t),a=s?s[e]:C,l=t.style;return null==a&&l&&l[e]&&(a=l[e]),zt.test(a)&&!qt.test(e)&&(i=l.left,(r=(o=t.runtimeStyle)&&o.left)&&(o.left=t.currentStyle.left),l.left="fontSize"===e?"1em":a,a=l.pixelLeft+"px",l.left=i,r&&(o.left=r)),""===a?"auto":a}),mt.each(["height","width"],function(t,o){mt.cssHooks[o]={get:function(t,e,n){if(e)return 0===t.offsetWidth&&Bt.test(mt.css(t,"display"))?mt.swap(t,Qt,function(){return ie(t,o,n)}):ie(t,o,n)},set:function(t,e,n){var i=n&&_t(t);return ee(0,e,n?ne(t,o,n,mt.support.boxSizing&&"border-box"===mt.css(t,"boxSizing",!1,i),i):0)}}}),mt.support.opacity||(mt.cssHooks.opacity={get:function(t,e){return Mt.test((e&&t.currentStyle?t.currentStyle.filter:t.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":e?"1":""},set:function(t,e){var n=t.style,i=t.currentStyle,o=mt.isNumeric(e)?"alpha(opacity="+100*e+")":"",r=i&&i.filter||n.filter||"";((n.zoom=1)<=e||""===e)&&""===mt.trim(r.replace(Pt,""))&&n.removeAttribute&&(n.removeAttribute("filter"),""===e||i&&!i.filter)||(n.filter=Pt.test(r)?r.replace(Pt,o):r+" "+o)}}),mt(function(){mt.support.reliableMarginRight||(mt.cssHooks.marginRight={get:function(t,e){if(e)return mt.swap(t,{display:"inline-block"},Ft,[t,"marginRight"])}}),!mt.support.pixelPosition&&mt.fn.position&&mt.each(["top","left"],function(t,n){mt.cssHooks[n]={get:function(t,e){if(e)return e=Ft(t,n),zt.test(e)?mt(t).position()[n]+"px":e}}})}),mt.expr&&mt.expr.filters&&(mt.expr.filters.hidden=function(t){return t.offsetWidth<=0&&t.offsetHeight<=0||!mt.support.reliableHiddenOffsets&&"none"===(t.style&&t.style.display||mt.css(t,"display"))},mt.expr.filters.visible=function(t){return!mt.expr.filters.hidden(t)}),mt.each({margin:"",padding:"",border:"Width"},function(o,r){mt.cssHooks[o+r]={expand:function(t){for(var e=0,n={},i="string"==typeof t?t.split(" "):[t];e<4;e++)n[o+Jt[e]+r]=i[e]||i[e-2]||i[0];return n}},Wt.test(o)||(mt.cssHooks[o+r].set=ee)});var se=/%20/g,ae=/\[\]$/,le=/\r?\n/g,ce=/^(?:submit|button|image|reset|file)$/i,ue=/^(?:input|select|textarea|keygen)/i;function pe(n,t,i,o){var e;if(mt.isArray(t))mt.each(t,function(t,e){i||ae.test(n)?o(n,e):pe(n+"["+("object"==typeof e?t:"")+"]",e,i,o)});else if(i||"object"!==mt.type(t))o(n,t);else for(e in t)pe(n+"["+e+"]",t[e],i,o)}mt.fn.extend({serialize:function(){return mt.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=mt.prop(this,"elements");return t?mt.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!mt(this).is(":disabled")&&ue.test(this.nodeName)&&!ce.test(t)&&(this.checked||!Tt.test(t))}).map(function(t,e){var n=mt(this).val();return null==n?null:mt.isArray(n)?mt.map(n,function(t){return{name:e.name,value:t.replace(le,"\r\n")}}):{name:e.name,value:n.replace(le,"\r\n")}}).get()}}),mt.param=function(t,e){var n,i=[],o=function(t,e){e=mt.isFunction(e)?e():null==e?"":e,i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(e)};if(e===C&&(e=mt.ajaxSettings&&mt.ajaxSettings.traditional),mt.isArray(t)||t.jquery&&!mt.isPlainObject(t))mt.each(t,function(){o(this.name,this.value)});else for(n in t)pe(n,t[n],e,o);return i.join("&").replace(se,"+")},mt.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(t,n){mt.fn[n]=function(t,e){return 0<arguments.length?this.on(n,null,t,e):this.trigger(n)}}),mt.fn.hover=function(t,e){return this.mouseenter(t).mouseleave(e||t)};var fe,de,he=mt.now(),ge=/\?/,me=/#.*$/,ye=/([?&])_=[^&]*/,ve=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,be=/^(?:GET|HEAD)$/,xe=/^\/\//,we=/^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,Te=mt.fn.load,Ce={},Ne={},Ee="*/".concat("*");try{de=t.href}catch(t){(de=g.createElement("a")).href="",de=de.href}function ke(r){return function(t,e){"string"!=typeof t&&(e=t,t="*");var n,i=0,o=t.toLowerCase().match(N)||[];if(mt.isFunction(e))for(;n=o[i++];)"+"===n[0]?(n=n.slice(1)||"*",(r[n]=r[n]||[]).unshift(e)):(r[n]=r[n]||[]).push(e)}}function Se(e,o,r,s){var a={},l=e===Ne;function c(t){var i;return a[t]=!0,mt.each(e[t]||[],function(t,e){var n=e(o,r,s);return"string"!=typeof n||l||a[n]?l?!(i=n):void 0:(o.dataTypes.unshift(n),c(n),!1)}),i}return c(o.dataTypes[0])||!a["*"]&&c("*")}function $e(t,e){var n,i,o=mt.ajaxSettings.flatOptions||{};for(i in e)e[i]!==C&&((o[i]?t:n||(n={}))[i]=e[i]);return n&&mt.extend(!0,t,n),t}fe=we.exec(de.toLowerCase())||[],mt.fn.load=function(t,e,n){if("string"!=typeof t&&Te)return Te.apply(this,arguments);var i,o,r,s=this,a=t.indexOf(" ");return 0<=a&&(i=t.slice(a,t.length),t=t.slice(0,a)),mt.isFunction(e)?(n=e,e=C):e&&"object"==typeof e&&(r="POST"),0<s.length&&mt.ajax({url:t,type:r,dataType:"html",data:e}).done(function(t){o=arguments,s.html(i?mt("<div>").append(mt.parseHTML(t)).find(i):t)}).complete(n&&function(t,e){s.each(n,o||[t.responseText,e,t])}),this},mt.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){mt.fn[e]=function(t){return this.on(e,t)}}),mt.each(["get","post"],function(t,o){mt[o]=function(t,e,n,i){return mt.isFunction(e)&&(i=i||n,n=e,e=C),mt.ajax({url:t,type:o,dataType:i,data:e,success:n})}}),mt.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:de,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(fe[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ee,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText"},converters:{"* text":h.String,"text html":!0,"text json":mt.parseJSON,"text xml":mt.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?$e($e(t,mt.ajaxSettings),e):$e(mt.ajaxSettings,t)},ajaxPrefilter:ke(Ce),ajaxTransport:ke(Ne),ajax:function(t,e){"object"==typeof t&&(e=t,t=C),e=e||{};var n,i,u,p,f,d,h,o,g=mt.ajaxSetup({},e),m=g.context||g,y=g.context&&(m.nodeType||m.jquery)?mt(m):mt.event,v=mt.Deferred(),b=mt.Callbacks("once memory"),x=g.statusCode||{},r={},s={},w=0,a="canceled",T={readyState:0,getResponseHeader:function(t){var e;if(2===w){if(!o)for(o={};e=ve.exec(p);)o[e[1].toLowerCase()]=e[2];e=o[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return 2===w?p:null},setRequestHeader:function(t,e){var n=t.toLowerCase();return w||(t=s[n]=s[n]||t,r[t]=e),this},overrideMimeType:function(t){return w||(g.mimeType=t),this},statusCode:function(t){var e;if(t)if(w<2)for(e in t)x[e]=[x[e],t[e]];else T.always(t[T.status]);return this},abort:function(t){var e=t||a;return h&&h.abort(e),l(0,e),this}};if(v.promise(T).complete=b.add,T.success=T.done,T.error=T.fail,g.url=((t||g.url||de)+"").replace(me,"").replace(xe,fe[1]+"//"),g.type=e.method||e.type||g.method||g.type,g.dataTypes=mt.trim(g.dataType||"*").toLowerCase().match(N)||[""],null==g.crossDomain&&(n=we.exec(g.url.toLowerCase()),g.crossDomain=!(!n||n[1]===fe[1]&&n[2]===fe[2]&&(n[3]||("http:"===n[1]?80:443))==(fe[3]||("http:"===fe[1]?80:443)))),g.data&&g.processData&&"string"!=typeof g.data&&(g.data=mt.param(g.data,g.traditional)),Se(Ce,g,e,T),2===w)return T;for(i in(d=g.global)&&0==mt.active++&&mt.event.trigger("ajaxStart"),g.type=g.type.toUpperCase(),g.hasContent=!be.test(g.type),u=g.url,g.hasContent||(g.data&&(u=g.url+=(ge.test(u)?"&":"?")+g.data,delete g.data),!1===g.cache&&(g.url=ye.test(u)?u.replace(ye,"$1_="+he++):u+(ge.test(u)?"&":"?")+"_="+he++)),g.ifModified&&(mt.lastModified[u]&&T.setRequestHeader("If-Modified-Since",mt.lastModified[u]),mt.etag[u]&&T.setRequestHeader("If-None-Match",mt.etag[u])),(g.data&&g.hasContent&&!1!==g.contentType||e.contentType)&&T.setRequestHeader("Content-Type",g.contentType),T.setRequestHeader("Accept",g.dataTypes[0]&&g.accepts[g.dataTypes[0]]?g.accepts[g.dataTypes[0]]+("*"!==g.dataTypes[0]?", "+Ee+"; q=0.01":""):g.accepts["*"]),g.headers)T.setRequestHeader(i,g.headers[i]);if(g.beforeSend&&(!1===g.beforeSend.call(m,T,g)||2===w))return T.abort();for(i in a="abort",{success:1,error:1,complete:1})T[i](g[i]);if(h=Se(Ne,g,e,T)){T.readyState=1,d&&y.trigger("ajaxSend",[T,g]),g.async&&0<g.timeout&&(f=setTimeout(function(){T.abort("timeout")},g.timeout));try{w=1,h.send(r,l)}catch(t){if(!(w<2))throw t;l(-1,t)}}else l(-1,"No Transport");function l(t,e,n,i){var o,r,s,a,l,c=e;2!==w&&(w=2,f&&clearTimeout(f),h=C,p=i||"",T.readyState=0<t?4:0,n&&(a=function(t,e,n){var i,o,r,s,a=t.contents,l=t.dataTypes,c=t.responseFields;for(s in c)s in n&&(e[c[s]]=n[s]);for(;"*"===l[0];)l.shift(),o===C&&(o=t.mimeType||e.getResponseHeader("Content-Type"));if(o)for(s in a)if(a[s]&&a[s].test(o)){l.unshift(s);break}if(l[0]in n)r=l[0];else{for(s in n){if(!l[0]||t.converters[s+" "+l[0]]){r=s;break}i||(i=s)}r=r||i}if(r)return r!==l[0]&&l.unshift(r),n[r]}(g,T,n)),200<=t&&t<300||304===t?(g.ifModified&&((l=T.getResponseHeader("Last-Modified"))&&(mt.lastModified[u]=l),(l=T.getResponseHeader("etag"))&&(mt.etag[u]=l)),204===t?(o=!0,c="nocontent"):304===t?(o=!0,c="notmodified"):(c=(o=function(t,e){var n,i,o,r,s={},a=0,l=t.dataTypes.slice(),c=l[0];t.dataFilter&&(e=t.dataFilter(e,t.dataType));if(l[1])for(o in t.converters)s[o.toLowerCase()]=t.converters[o];for(;i=l[++a];)if("*"!==i){if("*"!==c&&c!==i){if(!(o=s[c+" "+i]||s["* "+i]))for(n in s)if((r=n.split(" "))[1]===i&&(o=s[c+" "+r[0]]||s["* "+r[0]])){!0===o?o=s[n]:!0!==s[n]&&(i=r[0],l.splice(a--,0,i));break}if(!0!==o)if(o&&t.throws)e=o(e);else try{e=o(e)}catch(t){return{state:"parsererror",error:o?t:"No conversion from "+c+" to "+i}}}c=i}return{state:"success",data:e}}(g,a)).state,r=o.data,o=!(s=o.error))):(s=c,!t&&c||(c="error",t<0&&(t=0))),T.status=t,T.statusText=(e||c)+"",o?v.resolveWith(m,[r,c,T]):v.rejectWith(m,[T,c,s]),T.statusCode(x),x=C,d&&y.trigger(o?"ajaxSuccess":"ajaxError",[T,g,o?r:s]),b.fireWith(m,[T,c]),d&&(y.trigger("ajaxComplete",[T,g]),--mt.active||mt.event.trigger("ajaxStop")))}return T},getScript:function(t,e){return mt.get(t,C,e,"script")},getJSON:function(t,e,n){return mt.get(t,e,n,"json")}}),mt.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(t){return mt.globalEval(t),t}}}),mt.ajaxPrefilter("script",function(t){t.cache===C&&(t.cache=!1),t.crossDomain&&(t.type="GET",t.global=!1)}),mt.ajaxTransport("script",function(e){if(e.crossDomain){var i,o=g.head||mt("head")[0]||g.documentElement;return{send:function(t,n){(i=g.createElement("script")).async=!0,e.scriptCharset&&(i.charset=e.scriptCharset),i.src=e.url,i.onload=i.onreadystatechange=function(t,e){(e||!i.readyState||/loaded|complete/.test(i.readyState))&&(i.onload=i.onreadystatechange=null,i.parentNode&&i.parentNode.removeChild(i),i=null,e||n(200,"success"))},o.insertBefore(i,o.firstChild)},abort:function(){i&&i.onload(C,!0)}}}});var Ae=[],De=/(=)\?(?=&|$)|\?\?/;mt.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ae.pop()||mt.expando+"_"+he++;return this[t]=!0,t}}),mt.ajaxPrefilter("json jsonp",function(t,e,n){var i,o,r,s=!1!==t.jsonp&&(De.test(t.url)?"url":"string"==typeof t.data&&!(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&De.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=mt.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(De,"$1"+i):!1!==t.jsonp&&(t.url+=(ge.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return r||mt.error(i+" was not called"),r[0]},t.dataTypes[0]="json",o=h[i],h[i]=function(){r=arguments},n.always(function(){h[i]=o,t[i]&&(t.jsonpCallback=e.jsonpCallback,Ae.push(i)),r&&mt.isFunction(o)&&o(r[0]),r=o=C}),"script"});var je,Oe,Le=0,Ie=h.ActiveXObject&&function(){var t;for(t in je)je[t](C,!0)};function He(){try{return new h.XMLHttpRequest}catch(t){}}mt.ajaxSettings.xhr=h.ActiveXObject?function(){return!this.isLocal&&He()||function(){try{return new h.ActiveXObject("Microsoft.XMLHTTP")}catch(t){}}()}:He,Oe=mt.ajaxSettings.xhr(),mt.support.cors=!!Oe&&"withCredentials"in Oe,(Oe=mt.support.ajax=!!Oe)&&mt.ajaxTransport(function(c){var u;if(!c.crossDomain||mt.support.cors)return{send:function(t,s){var a,e,l=c.xhr();if(c.username?l.open(c.type,c.url,c.async,c.username,c.password):l.open(c.type,c.url,c.async),c.xhrFields)for(e in c.xhrFields)l[e]=c.xhrFields[e];c.mimeType&&l.overrideMimeType&&l.overrideMimeType(c.mimeType),c.crossDomain||t["X-Requested-With"]||(t["X-Requested-With"]="XMLHttpRequest");try{for(e in t)l.setRequestHeader(e,t[e])}catch(t){}l.send(c.hasContent&&c.data||null),u=function(t,e){var n,i,o,r;try{if(u&&(e||4===l.readyState))if(u=C,a&&(l.onreadystatechange=mt.noop,Ie&&delete je[a]),e)4!==l.readyState&&l.abort();else{r={},n=l.status,i=l.getAllResponseHeaders(),"string"==typeof l.responseText&&(r.text=l.responseText);try{o=l.statusText}catch(t){o=""}n||!c.isLocal||c.crossDomain?1223===n&&(n=204):n=r.text?200:404}}catch(t){e||s(-1,t)}r&&s(n,o,r,i)},c.async?4===l.readyState?setTimeout(u):(a=++Le,Ie&&(je||(je={},mt(h).unload(Ie)),je[a]=u),l.onreadystatechange=u):u()},abort:function(){u&&u(C,!0)}}});var Re,_e,Fe=/^(?:toggle|show|hide)$/,Pe=new RegExp("^(?:([+-])=|)("+d+")([a-z%]*)$","i"),Me=/queueHooks$/,qe=[function(e,t,n){var i,o,r,s,a,l,c,u,p,f=this,d=e.style,h={},g=[],m=e.nodeType&&Zt(e);n.queue||(null==(u=mt._queueHooks(e,"fx")).unqueued&&(u.unqueued=0,p=u.empty.fire,u.empty.fire=function(){u.unqueued||p()}),u.unqueued++,f.always(function(){f.always(function(){u.unqueued--,mt.queue(e,"fx").length||u.empty.fire()})}));1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],"inline"===mt.css(e,"display")&&"none"===mt.css(e,"float")&&(mt.support.inlineBlockNeedsLayout&&"inline"!==oe(e.nodeName)?d.zoom=1:d.display="inline-block"));n.overflow&&(d.overflow="hidden",mt.support.shrinkWrapBlocks||f.always(function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]}));for(o in t)if(s=t[o],Fe.exec(s)){if(delete t[o],l=l||"toggle"===s,s===(m?"hide":"show"))continue;g.push(o)}if(r=g.length){"hidden"in(a=mt._data(e,"fxshow")||mt._data(e,"fxshow",{}))&&(m=a.hidden),l&&(a.hidden=!m),m?mt(e).show():f.done(function(){mt(e).hide()}),f.done(function(){var t;for(t in mt._removeData(e,"fxshow"),h)mt.style(e,t,h[t])});for(o=0;o<r;o++)i=g[o],c=f.createTween(i,m?a[i]:0),h[i]=a[i]||mt.style(e,i),i in a||(a[i]=c.start,m&&(c.end=c.start,c.start="width"===i||"height"===i?1:0))}}],Be={"*":[function(t,e){var n,i,o=this.createTween(t,e),r=Pe.exec(e),s=o.cur(),a=+s||0,l=1,c=20;if(r){if(n=+r[2],"px"!==(i=r[3]||(mt.cssNumber[t]?"":"px"))&&a)for(a=mt.css(o.elem,t,!0)||n||1;a/=l=l||".5",mt.style(o.elem,t,a+i),l!==(l=o.cur()/s)&&1!==l&&--c;);o.unit=i,o.start=a,o.end=r[1]?a+(r[1]+1)*n:n}return o}]};function We(){return setTimeout(function(){Re=C}),Re=mt.now()}function Ue(r,t,e){var n,s,a,i,o=0,l=qe.length,c=mt.Deferred().always(function(){delete u.elem}),u=function(){if(s)return!1;for(var t=Re||We(),e=Math.max(0,p.startTime+p.duration-t),n=1-(e/p.duration||0),i=0,o=p.tweens.length;i<o;i++)p.tweens[i].run(n);return c.notifyWith(r,[p,n,e]),n<1&&o?e:(c.resolveWith(r,[p]),!1)},p=c.promise({elem:r,props:mt.extend({},t),opts:mt.extend(!0,{specialEasing:{}},e),originalProperties:t,originalOptions:e,startTime:Re||We(),duration:e.duration,tweens:[],createTween:function(t,e){var n=mt.Tween(r,p.opts,t,e,p.opts.specialEasing[t]||p.opts.easing);return p.tweens.push(n),n},stop:function(t){var e=0,n=t?p.tweens.length:0;if(s)return this;for(s=!0;e<n;e++)p.tweens[e].run(1);return t?c.resolveWith(r,[p,t]):c.rejectWith(r,[p,t]),this}}),f=p.props;for(!function(t,e){var n,i,o,r,s;for(o in t)if(i=mt.camelCase(o),r=e[i],n=t[o],mt.isArray(n)&&(r=n[1],n=t[o]=n[0]),o!==i&&(t[i]=n,delete t[o]),(s=mt.cssHooks[i])&&"expand"in s)for(o in n=s.expand(n),delete t[i],n)o in t||(t[o]=n[o],e[o]=r);else e[i]=r}(f,p.opts.specialEasing);o<l;o++)if(n=qe[o].call(p,r,f,p.opts))return n;return a=p,i=f,mt.each(i,function(t,e){for(var n=(Be[t]||[]).concat(Be["*"]),i=0,o=n.length;i<o;i++)if(n[i].call(a,t,e))return}),mt.isFunction(p.opts.start)&&p.opts.start.call(r,p),mt.fx.timer(mt.extend(u,{elem:r,anim:p,queue:p.opts.queue})),p.progress(p.opts.progress).done(p.opts.done,p.opts.complete).fail(p.opts.fail).always(p.opts.always)}function ze(t,e,n,i,o){return new ze.prototype.init(t,e,n,i,o)}function Xe(t,e){var n,i={height:t},o=0;for(e=e?1:0;o<4;o+=2-e)i["margin"+(n=Jt[o])]=i["padding"+n]=t;return e&&(i.opacity=i.width=t),i}function Ve(t){return mt.isWindow(t)?t:9===t.nodeType&&(t.defaultView||t.parentWindow)}mt.Animation=mt.extend(Ue,{tweener:function(t,e){for(var n,i=0,o=(t=mt.isFunction(t)?(e=t,["*"]):t.split(" ")).length;i<o;i++)n=t[i],Be[n]=Be[n]||[],Be[n].unshift(e)},prefilter:function(t,e){e?qe.unshift(t):qe.push(t)}}),((mt.Tween=ze).prototype={constructor:ze,init:function(t,e,n,i,o,r){this.elem=t,this.prop=n,this.easing=o||"swing",this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=r||(mt.cssNumber[n]?"":"px")},cur:function(){var t=ze.propHooks[this.prop];return t&&t.get?t.get(this):ze.propHooks._default.get(this)},run:function(t){var e,n=ze.propHooks[this.prop];return this.options.duration?this.pos=e=mt.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ze.propHooks._default.set(this),this}}).init.prototype=ze.prototype,(ze.propHooks={_default:{get:function(t){var e;return null==t.elem[t.prop]||t.elem.style&&null!=t.elem.style[t.prop]?(e=mt.css(t.elem,t.prop,""))&&"auto"!==e?e:0:t.elem[t.prop]},set:function(t){mt.fx.step[t.prop]?mt.fx.step[t.prop](t):t.elem.style&&(null!=t.elem.style[mt.cssProps[t.prop]]||mt.cssHooks[t.prop])?mt.style(t.elem,t.prop,t.now+t.unit):t.elem[t.prop]=t.now}}}).scrollTop=ze.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},mt.each(["toggle","show","hide"],function(t,i){var o=mt.fn[i];mt.fn[i]=function(t,e,n){return null==t||"boolean"==typeof t?o.apply(this,arguments):this.animate(Xe(i,!0),t,e,n)}}),mt.fn.extend({fadeTo:function(t,e,n,i){return this.filter(Zt).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(e,t,n,i){var o=mt.isEmptyObject(e),r=mt.speed(t,n,i),s=function(){var t=Ue(this,mt.extend({},e),r);s.finish=function(){t.stop(!0)},(o||mt._data(this,"finish"))&&t.stop(!0)};return s.finish=s,o||!1===r.queue?this.each(s):this.queue(r.queue,s)},stop:function(o,t,r){var s=function(t){var e=t.stop;delete t.stop,e(r)};return"string"!=typeof o&&(r=t,t=o,o=C),t&&!1!==o&&this.queue(o||"fx",[]),this.each(function(){var t=!0,e=null!=o&&o+"queueHooks",n=mt.timers,i=mt._data(this);if(e)i[e]&&i[e].stop&&s(i[e]);else for(e in i)i[e]&&i[e].stop&&Me.test(e)&&s(i[e]);for(e=n.length;e--;)n[e].elem!==this||null!=o&&n[e].queue!==o||(n[e].anim.stop(r),t=!1,n.splice(e,1));!t&&r||mt.dequeue(this,o)})},finish:function(s){return!1!==s&&(s=s||"fx"),this.each(function(){var t,e=mt._data(this),n=e[s+"queue"],i=e[s+"queueHooks"],o=mt.timers,r=n?n.length:0;for(e.finish=!0,mt.queue(this,s,[]),i&&i.cur&&i.cur.finish&&i.cur.finish.call(this),t=o.length;t--;)o[t].elem===this&&o[t].queue===s&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<r;t++)n[t]&&n[t].finish&&n[t].finish.call(this);delete e.finish})}}),mt.each({slideDown:Xe("show"),slideUp:Xe("hide"),slideToggle:Xe("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,i){mt.fn[t]=function(t,e,n){return this.animate(i,t,e,n)}}),mt.speed=function(t,e,n){var i=t&&"object"==typeof t?mt.extend({},t):{complete:n||!n&&e||mt.isFunction(t)&&t,duration:t,easing:n&&e||e&&!mt.isFunction(e)&&e};return i.duration=mt.fx.off?0:"number"==typeof i.duration?i.duration:i.duration in mt.fx.speeds?mt.fx.speeds[i.duration]:mt.fx.speeds._default,null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){mt.isFunction(i.old)&&i.old.call(this),i.queue&&mt.dequeue(this,i.queue)},i},mt.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2}},mt.timers=[],mt.fx=ze.prototype.init,mt.fx.tick=function(){var t,e=mt.timers,n=0;for(Re=mt.now();n<e.length;n++)(t=e[n])()||e[n]!==t||e.splice(n--,1);e.length||mt.fx.stop(),Re=C},mt.fx.timer=function(t){t()&&mt.timers.push(t)&&mt.fx.start()},mt.fx.interval=13,mt.fx.start=function(){_e||(_e=setInterval(mt.fx.tick,mt.fx.interval))},mt.fx.stop=function(){clearInterval(_e),_e=null},mt.fx.speeds={slow:600,fast:200,_default:400},mt.fx.step={},mt.expr&&mt.expr.filters&&(mt.expr.filters.animated=function(e){return mt.grep(mt.timers,function(t){return e===t.elem}).length}),mt.fn.offset=function(e){if(arguments.length)return e===C?this:this.each(function(t){mt.offset.setOffset(this,e,t)});var t,n,i={top:0,left:0},o=this[0],r=o&&o.ownerDocument;return r?(t=r.documentElement,mt.contains(t,o)?(typeof o.getBoundingClientRect!==y&&(i=o.getBoundingClientRect()),n=Ve(r),{top:i.top+(n.pageYOffset||t.scrollTop)-(t.clientTop||0),left:i.left+(n.pageXOffset||t.scrollLeft)-(t.clientLeft||0)}):i):void 0},mt.offset={setOffset:function(t,e,n){var i=mt.css(t,"position");"static"===i&&(t.style.position="relative");var o,r,s=mt(t),a=s.offset(),l=mt.css(t,"top"),c=mt.css(t,"left"),u={},p={};r=("absolute"===i||"fixed"===i)&&-1<mt.inArray("auto",[l,c])?(o=(p=s.position()).top,p.left):(o=parseFloat(l)||0,parseFloat(c)||0),mt.isFunction(e)&&(e=e.call(t,n,a)),null!=e.top&&(u.top=e.top-a.top+o),null!=e.left&&(u.left=e.left-a.left+r),"using"in e?e.using.call(t,u):s.css(u)}},mt.fn.extend({position:function(){if(this[0]){var t,e,n={top:0,left:0},i=this[0];return"fixed"===mt.css(i,"position")?e=i.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),mt.nodeName(t[0],"html")||(n=t.offset()),n.top+=mt.css(t[0],"borderTopWidth",!0),n.left+=mt.css(t[0],"borderLeftWidth",!0)),{top:e.top-n.top-mt.css(i,"marginTop",!0),left:e.left-n.left-mt.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent||g.documentElement;t&&!mt.nodeName(t,"html")&&"static"===mt.css(t,"position");)t=t.offsetParent;return t||g.documentElement})}}),mt.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,o){var r=/Y/.test(o);mt.fn[e]=function(t){return mt.access(this,function(t,e,n){var i=Ve(t);if(n===C)return i?o in i?i[o]:i.document.documentElement[e]:t[e];i?i.scrollTo(r?mt(i).scrollLeft():n,r?n:mt(i).scrollTop()):t[e]=n},e,t,arguments.length,null)}}),mt.each({Height:"height",Width:"width"},function(r,s){mt.each({padding:"inner"+r,content:s,"":"outer"+r},function(i,t){mt.fn[t]=function(t,e){var n=arguments.length&&(i||"boolean"!=typeof t),o=i||(!0===t||!0===e?"margin":"border");return mt.access(this,function(t,e,n){var i;return mt.isWindow(t)?t.document.documentElement["client"+r]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+r],i["scroll"+r],t.body["offset"+r],i["offset"+r],i["client"+r])):n===C?mt.css(t,e,o):mt.style(t,e,n,o)},s,n?t:C,n,null)}})}),h.jQuery=h.$=mt,"function"==typeof define&&define.amd&&define.amd.jQuery&&define("jquery",[],function(){return mt})}(window),"undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");!function(t){"use strict";var e=jQuery.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1==e[0]&&9==e[1]&&e[2]<1||3<e[0])throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4")}(),function(i){"use strict";i.fn.emulateTransitionEnd=function(t){var e=!1,n=this;i(this).one("bsTransitionEnd",function(){e=!0});return setTimeout(function(){e||i(n).trigger(i.support.transition.end)},t),this},i(function(){i.support.transition=function(){var t=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var n in e)if(void 0!==t.style[n])return{end:e[n]};return!1}(),i.support.transition&&(i.event.special.bsTransitionEnd={bindType:i.support.transition.end,delegateType:i.support.transition.end,handle:function(t){if(i(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}})})}(jQuery),function(r){"use strict";var e='[data-dismiss="alert"]',s=function(t){r(t).on("click",e,this.close)};s.VERSION="3.3.7",s.TRANSITION_DURATION=150,s.prototype.close=function(t){var e=r(this),n=e.attr("data-target");n||(n=(n=e.attr("href"))&&n.replace(/.*(?=#[^\s]*$)/,""));var i=r("#"===n?[]:n);function o(){i.detach().trigger("closed.bs.alert").remove()}t&&t.preventDefault(),i.length||(i=e.closest(".alert")),i.trigger(t=r.Event("close.bs.alert")),t.isDefaultPrevented()||(i.removeClass("in"),r.support.transition&&i.hasClass("fade")?i.one("bsTransitionEnd",o).emulateTransitionEnd(s.TRANSITION_DURATION):o())};var t=r.fn.alert;r.fn.alert=function(n){return this.each(function(){var t=r(this),e=t.data("bs.alert");e||t.data("bs.alert",e=new s(this)),"string"==typeof n&&e[n].call(t)})},r.fn.alert.Constructor=s,r.fn.alert.noConflict=function(){return r.fn.alert=t,this},r(document).on("click.bs.alert.data-api",e,s.prototype.close)}(jQuery),function(r){"use strict";var o=function(t,e){this.$element=r(t),this.options=r.extend({},o.DEFAULTS,e),this.isLoading=!1};function n(i){return this.each(function(){var t=r(this),e=t.data("bs.button"),n="object"==typeof i&&i;e||t.data("bs.button",e=new o(this,n)),"toggle"==i?e.toggle():i&&e.setState(i)})}o.VERSION="3.3.7",o.DEFAULTS={loadingText:"loading..."},o.prototype.setState=function(t){var e="disabled",n=this.$element,i=n.is("input")?"val":"html",o=n.data();t+="Text",null==o.resetText&&n.data("resetText",n[i]()),setTimeout(r.proxy(function(){n[i](null==o[t]?this.options[t]:o[t]),"loadingText"==t?(this.isLoading=!0,n.addClass(e).attr(e,e).prop(e,!0)):this.isLoading&&(this.isLoading=!1,n.removeClass(e).removeAttr(e).prop(e,!1))},this),0)},o.prototype.toggle=function(){var t=!0,e=this.$element.closest('[data-toggle="buttons"]');if(e.length){var n=this.$element.find("input");"radio"==n.prop("type")?(n.prop("checked")&&(t=!1),e.find(".active").removeClass("active"),this.$element.addClass("active")):"checkbox"==n.prop("type")&&(n.prop("checked")!==this.$element.hasClass("active")&&(t=!1),this.$element.toggleClass("active")),n.prop("checked",this.$element.hasClass("active")),t&&n.trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active")),this.$element.toggleClass("active")};var t=r.fn.button;r.fn.button=n,r.fn.button.Constructor=o,r.fn.button.noConflict=function(){return r.fn.button=t,this},r(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(t){var e=r(t.target).closest(".btn");n.call(e,"toggle"),r(t.target).is('input[type="radio"], input[type="checkbox"]')||(t.preventDefault(),e.is("input,button")?e.trigger("focus"):e.find("input:visible,button:visible").first().trigger("focus"))}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(t){r(t.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(t.type))})}(jQuery),function(p){"use strict";var f=function(t,e){this.$element=p(t),this.$indicators=this.$element.find(".carousel-indicators"),this.options=e,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",p.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",p.proxy(this.pause,this)).on("mouseleave.bs.carousel",p.proxy(this.cycle,this))};function s(o){return this.each(function(){var t=p(this),e=t.data("bs.carousel"),n=p.extend({},f.DEFAULTS,t.data(),"object"==typeof o&&o),i="string"==typeof o?o:n.slide;e||t.data("bs.carousel",e=new f(this,n)),"number"==typeof o?e.to(o):i?e[i]():n.interval&&e.pause().cycle()})}f.VERSION="3.3.7",f.TRANSITION_DURATION=600,f.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},f.prototype.keydown=function(t){if(!/input|textarea/i.test(t.target.tagName)){switch(t.which){case 37:this.prev();break;case 39:this.next();break;default:return}t.preventDefault()}},f.prototype.cycle=function(t){return t||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(p.proxy(this.next,this),this.options.interval)),this},f.prototype.getItemIndex=function(t){return this.$items=t.parent().children(".item"),this.$items.index(t||this.$active)},f.prototype.getItemForDirection=function(t,e){var n=this.getItemIndex(e);if(("prev"==t&&0===n||"next"==t&&n==this.$items.length-1)&&!this.options.wrap)return e;var i=(n+("prev"==t?-1:1))%this.$items.length;return this.$items.eq(i)},f.prototype.to=function(t){var e=this,n=this.getItemIndex(this.$active=this.$element.find(".item.active"));if(!(t>this.$items.length-1||t<0))return this.sliding?this.$element.one("slid.bs.carousel",function(){e.to(t)}):n==t?this.pause().cycle():this.slide(n<t?"next":"prev",this.$items.eq(t))},f.prototype.pause=function(t){return t||(this.paused=!0),this.$element.find(".next, .prev").length&&p.support.transition&&(this.$element.trigger(p.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},f.prototype.next=function(){if(!this.sliding)return this.slide("next")},f.prototype.prev=function(){if(!this.sliding)return this.slide("prev")},f.prototype.slide=function(t,e){var n=this.$element.find(".item.active"),i=e||this.getItemForDirection(t,n),o=this.interval,r="next"==t?"left":"right",s=this;if(i.hasClass("active"))return this.sliding=!1;var a=i[0],l=p.Event("slide.bs.carousel",{relatedTarget:a,direction:r});if(this.$element.trigger(l),!l.isDefaultPrevented()){if(this.sliding=!0,o&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var c=p(this.$indicators.children()[this.getItemIndex(i)]);c&&c.addClass("active")}var u=p.Event("slid.bs.carousel",{relatedTarget:a,direction:r});return p.support.transition&&this.$element.hasClass("slide")?(i.addClass(t),i[0].offsetWidth,n.addClass(r),i.addClass(r),n.one("bsTransitionEnd",function(){i.removeClass([t,r].join(" ")).addClass("active"),n.removeClass(["active",r].join(" ")),s.sliding=!1,setTimeout(function(){s.$element.trigger(u)},0)}).emulateTransitionEnd(f.TRANSITION_DURATION)):(n.removeClass("active"),i.addClass("active"),this.sliding=!1,this.$element.trigger(u)),o&&this.cycle(),this}};var t=p.fn.carousel;p.fn.carousel=s,p.fn.carousel.Constructor=f,p.fn.carousel.noConflict=function(){return p.fn.carousel=t,this};var e=function(t){var e,n=p(this),i=p(n.attr("data-target")||(e=n.attr("href"))&&e.replace(/.*(?=#[^\s]+$)/,""));if(i.hasClass("carousel")){var o=p.extend({},i.data(),n.data()),r=n.attr("data-slide-to");r&&(o.interval=!1),s.call(i,o),r&&i.data("bs.carousel").to(r),t.preventDefault()}};p(document).on("click.bs.carousel.data-api","[data-slide]",e).on("click.bs.carousel.data-api","[data-slide-to]",e),p(window).on("load",function(){p('[data-ride="carousel"]').each(function(){var t=p(this);s.call(t,t.data())})})}(jQuery),function(s){"use strict";var a=function(t,e){this.$element=s(t),this.options=s.extend({},a.DEFAULTS,e),this.$trigger=s('[data-toggle="collapse"][href="#'+t.id+'"],[data-toggle="collapse"][data-target="#'+t.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};function o(t){var e,n=t.attr("data-target")||(e=t.attr("href"))&&e.replace(/.*(?=#[^\s]+$)/,"");return s(n)}function l(i){return this.each(function(){var t=s(this),e=t.data("bs.collapse"),n=s.extend({},a.DEFAULTS,t.data(),"object"==typeof i&&i);!e&&n.toggle&&/show|hide/.test(i)&&(n.toggle=!1),e||t.data("bs.collapse",e=new a(this,n)),"string"==typeof i&&e[i]()})}a.VERSION="3.3.7",a.TRANSITION_DURATION=350,a.DEFAULTS={toggle:!0},a.prototype.dimension=function(){return this.$element.hasClass("width")?"width":"height"},a.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var t,e=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(e&&e.length&&(t=e.data("bs.collapse"))&&t.transitioning)){var n=s.Event("show.bs.collapse");if(this.$element.trigger(n),!n.isDefaultPrevented()){e&&e.length&&(l.call(e,"hide"),t||e.data("bs.collapse",null));var i=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[i](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var o=function(){this.$element.removeClass("collapsing").addClass("collapse in")[i](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!s.support.transition)return o.call(this);var r=s.camelCase(["scroll",i].join("-"));this.$element.one("bsTransitionEnd",s.proxy(o,this)).emulateTransitionEnd(a.TRANSITION_DURATION)[i](this.$element[0][r])}}}},a.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var t=s.Event("hide.bs.collapse");if(this.$element.trigger(t),!t.isDefaultPrevented()){var e=this.dimension();this.$element[e](this.$element[e]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var n=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};if(!s.support.transition)return n.call(this);this.$element[e](0).one("bsTransitionEnd",s.proxy(n,this)).emulateTransitionEnd(a.TRANSITION_DURATION)}}},a.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},a.prototype.getParent=function(){return s(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(s.proxy(function(t,e){var n=s(e);this.addAriaAndCollapsedClass(o(n),n)},this)).end()},a.prototype.addAriaAndCollapsedClass=function(t,e){var n=t.hasClass("in");t.attr("aria-expanded",n),e.toggleClass("collapsed",!n).attr("aria-expanded",n)};var t=s.fn.collapse;s.fn.collapse=l,s.fn.collapse.Constructor=a,s.fn.collapse.noConflict=function(){return s.fn.collapse=t,this},s(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(t){var e=s(this);e.attr("data-target")||t.preventDefault();var n=o(e),i=n.data("bs.collapse")?"toggle":e.data();l.call(n,i)})}(jQuery),function(s){"use strict";var a='[data-toggle="dropdown"]',i=function(t){s(t).on("click.bs.dropdown",this.toggle)};function l(t){var e=t.attr("data-target");e||(e=(e=t.attr("href"))&&/#[A-Za-z]/.test(e)&&e.replace(/.*(?=#[^\s]*$)/,""));var n=e&&s(e);return n&&n.length?n:t.parent()}function r(i){i&&3===i.which||(s(".dropdown-backdrop").remove(),s(a).each(function(){var t=s(this),e=l(t),n={relatedTarget:this};e.hasClass("open")&&(i&&"click"==i.type&&/input|textarea/i.test(i.target.tagName)&&s.contains(e[0],i.target)||(e.trigger(i=s.Event("hide.bs.dropdown",n)),i.isDefaultPrevented()||(t.attr("aria-expanded","false"),e.removeClass("open").trigger(s.Event("hidden.bs.dropdown",n)))))}))}i.VERSION="3.3.7",i.prototype.toggle=function(t){var e=s(this);if(!e.is(".disabled, :disabled")){var n=l(e),i=n.hasClass("open");if(r(),!i){"ontouchstart"in document.documentElement&&!n.closest(".navbar-nav").length&&s(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(s(this)).on("click",r);var o={relatedTarget:this};if(n.trigger(t=s.Event("show.bs.dropdown",o)),t.isDefaultPrevented())return;e.trigger("focus").attr("aria-expanded","true"),n.toggleClass("open").trigger(s.Event("shown.bs.dropdown",o))}return!1}},i.prototype.keydown=function(t){if(/(38|40|27|32)/.test(t.which)&&!/input|textarea/i.test(t.target.tagName)){var e=s(this);if(t.preventDefault(),t.stopPropagation(),!e.is(".disabled, :disabled")){var n=l(e),i=n.hasClass("open");if(!i&&27!=t.which||i&&27==t.which)return 27==t.which&&n.find(a).trigger("focus"),e.trigger("click");var o=n.find(".dropdown-menu li:not(.disabled):visible a");if(o.length){var r=o.index(t.target);38==t.which&&0<r&&r--,40==t.which&&r<o.length-1&&r++,~r||(r=0),o.eq(r).trigger("focus")}}}};var t=s.fn.dropdown;s.fn.dropdown=function(n){return this.each(function(){var t=s(this),e=t.data("bs.dropdown");e||t.data("bs.dropdown",e=new i(this)),"string"==typeof n&&e[n].call(t)})},s.fn.dropdown.Constructor=i,s.fn.dropdown.noConflict=function(){return s.fn.dropdown=t,this},s(document).on("click.bs.dropdown.data-api",r).on("click.bs.dropdown.data-api",".dropdown form",function(t){t.stopPropagation()}).on("click.bs.dropdown.data-api",a,i.prototype.toggle).on("keydown.bs.dropdown.data-api",a,i.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",i.prototype.keydown)}(jQuery),function(r){"use strict";var s=function(t,e){this.options=e,this.$body=r(document.body),this.$element=r(t),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,r.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};function a(i,o){return this.each(function(){var t=r(this),e=t.data("bs.modal"),n=r.extend({},s.DEFAULTS,t.data(),"object"==typeof i&&i);e||t.data("bs.modal",e=new s(this,n)),"string"==typeof i?e[i](o):n.show&&e.show(o)})}s.VERSION="3.3.7",s.TRANSITION_DURATION=300,s.BACKDROP_TRANSITION_DURATION=150,s.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},s.prototype.toggle=function(t){return this.isShown?this.hide():this.show(t)},s.prototype.show=function(n){var i=this,t=r.Event("show.bs.modal",{relatedTarget:n});this.$element.trigger(t),this.isShown||t.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',r.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",function(){i.$element.one("mouseup.dismiss.bs.modal",function(t){r(t.target).is(i.$element)&&(i.ignoreBackdropClick=!0)})}),this.backdrop(function(){var t=r.support.transition&&i.$element.hasClass("fade");i.$element.parent().length||i.$element.appendTo(i.$body),i.$element.show().scrollTop(0),i.adjustDialog(),t&&i.$element[0].offsetWidth,i.$element.addClass("in"),i.enforceFocus();var e=r.Event("shown.bs.modal",{relatedTarget:n});t?i.$dialog.one("bsTransitionEnd",function(){i.$element.trigger("focus").trigger(e)}).emulateTransitionEnd(s.TRANSITION_DURATION):i.$element.trigger("focus").trigger(e)}))},s.prototype.hide=function(t){t&&t.preventDefault(),t=r.Event("hide.bs.modal"),this.$element.trigger(t),this.isShown&&!t.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),r(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),r.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",r.proxy(this.hideModal,this)).emulateTransitionEnd(s.TRANSITION_DURATION):this.hideModal())},s.prototype.enforceFocus=function(){r(document).off("focusin.bs.modal").on("focusin.bs.modal",r.proxy(function(t){document===t.target||this.$element[0]===t.target||this.$element.has(t.target).length||this.$element.trigger("focus")},this))},s.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",r.proxy(function(t){27==t.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},s.prototype.resize=function(){this.isShown?r(window).on("resize.bs.modal",r.proxy(this.handleUpdate,this)):r(window).off("resize.bs.modal")},s.prototype.hideModal=function(){var t=this;this.$element.hide(),this.backdrop(function(){t.$body.removeClass("modal-open"),t.resetAdjustments(),t.resetScrollbar(),t.$element.trigger("hidden.bs.modal")})},s.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},s.prototype.backdrop=function(t){var e=this,n=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var i=r.support.transition&&n;if(this.$backdrop=r(document.createElement("div")).addClass("modal-backdrop "+n).appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",r.proxy(function(t){this.ignoreBackdropClick?this.ignoreBackdropClick=!1:t.target===t.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide())},this)),i&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!t)return;i?this.$backdrop.one("bsTransitionEnd",t).emulateTransitionEnd(s.BACKDROP_TRANSITION_DURATION):t()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var o=function(){e.removeBackdrop(),t&&t()};r.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",o).emulateTransitionEnd(s.BACKDROP_TRANSITION_DURATION):o()}else t&&t()},s.prototype.handleUpdate=function(){this.adjustDialog()},s.prototype.adjustDialog=function(){var t=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&t?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!t?this.scrollbarWidth:""})},s.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},s.prototype.checkScrollbar=function(){var t=window.innerWidth;if(!t){var e=document.documentElement.getBoundingClientRect();t=e.right-Math.abs(e.left)}this.bodyIsOverflowing=document.body.clientWidth<t,this.scrollbarWidth=this.measureScrollbar()},s.prototype.setScrollbar=function(){var t=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"",this.bodyIsOverflowing&&this.$body.css("padding-right",t+this.scrollbarWidth)},s.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)},s.prototype.measureScrollbar=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",this.$body.append(t);var e=t.offsetWidth-t.clientWidth;return this.$body[0].removeChild(t),e};var t=r.fn.modal;r.fn.modal=a,r.fn.modal.Constructor=s,r.fn.modal.noConflict=function(){return r.fn.modal=t,this},r(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(t){var e=r(this),n=e.attr("href"),i=r(e.attr("data-target")||n&&n.replace(/.*(?=#[^\s]+$)/,"")),o=i.data("bs.modal")?"toggle":r.extend({remote:!/#/.test(n)&&n},i.data(),e.data());e.is("a")&&t.preventDefault(),i.one("show.bs.modal",function(t){t.isDefaultPrevented()||i.one("hidden.bs.modal",function(){e.is(":visible")&&e.trigger("focus")})}),a.call(i,o,this)})}(jQuery),function(g){"use strict";var m=function(t,e){this.type=null,this.options=null,this.enabled=null,this.timeout=null,this.hoverState=null,this.$element=null,this.inState=null,this.init("tooltip",t,e)};m.VERSION="3.3.7",m.TRANSITION_DURATION=150,m.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},m.prototype.init=function(t,e,n){if(this.enabled=!0,this.type=t,this.$element=g(e),this.options=this.getOptions(n),this.$viewport=this.options.viewport&&g(g.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport),this.inState={click:!1,hover:!1,focus:!1},this.$element[0]instanceof document.constructor&&!this.options.selector)throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!");for(var i=this.options.trigger.split(" "),o=i.length;o--;){var r=i[o];if("click"==r)this.$element.on("click."+this.type,this.options.selector,g.proxy(this.toggle,this));else if("manual"!=r){var s="hover"==r?"mouseenter":"focusin",a="hover"==r?"mouseleave":"focusout";this.$element.on(s+"."+this.type,this.options.selector,g.proxy(this.enter,this)),this.$element.on(a+"."+this.type,this.options.selector,g.proxy(this.leave,this))}}this.options.selector?this._options=g.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},m.prototype.getDefaults=function(){return m.DEFAULTS},m.prototype.getOptions=function(t){return(t=g.extend({},this.getDefaults(),this.$element.data(),t)).delay&&"number"==typeof t.delay&&(t.delay={show:t.delay,hide:t.delay}),t},m.prototype.getDelegateOptions=function(){var n={},i=this.getDefaults();return this._options&&g.each(this._options,function(t,e){i[t]!=e&&(n[t]=e)}),n},m.prototype.enter=function(t){var e=t instanceof this.constructor?t:g(t.currentTarget).data("bs."+this.type);if(e||(e=new this.constructor(t.currentTarget,this.getDelegateOptions()),g(t.currentTarget).data("bs."+this.type,e)),t instanceof g.Event&&(e.inState["focusin"==t.type?"focus":"hover"]=!0),e.tip().hasClass("in")||"in"==e.hoverState)e.hoverState="in";else{if(clearTimeout(e.timeout),e.hoverState="in",!e.options.delay||!e.options.delay.show)return e.show();e.timeout=setTimeout(function(){"in"==e.hoverState&&e.show()},e.options.delay.show)}},m.prototype.isInStateTrue=function(){for(var t in this.inState)if(this.inState[t])return!0;return!1},m.prototype.leave=function(t){var e=t instanceof this.constructor?t:g(t.currentTarget).data("bs."+this.type);if(e||(e=new this.constructor(t.currentTarget,this.getDelegateOptions()),g(t.currentTarget).data("bs."+this.type,e)),t instanceof g.Event&&(e.inState["focusout"==t.type?"focus":"hover"]=!1),!e.isInStateTrue()){if(clearTimeout(e.timeout),e.hoverState="out",!e.options.delay||!e.options.delay.hide)return e.hide();e.timeout=setTimeout(function(){"out"==e.hoverState&&e.hide()},e.options.delay.hide)}},m.prototype.show=function(){var t=g.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(t);var e=g.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(t.isDefaultPrevented()||!e)return;var n=this,i=this.tip(),o=this.getUID(this.type);this.setContent(),i.attr("id",o),this.$element.attr("aria-describedby",o),this.options.animation&&i.addClass("fade");var r="function"==typeof this.options.placement?this.options.placement.call(this,i[0],this.$element[0]):this.options.placement,s=/\s?auto?\s?/i,a=s.test(r);a&&(r=r.replace(s,"")||"top"),i.detach().css({top:0,left:0,display:"block"}).addClass(r).data("bs."+this.type,this),this.options.container?i.appendTo(this.options.container):i.insertAfter(this.$element),this.$element.trigger("inserted.bs."+this.type);var l=this.getPosition(),c=i[0].offsetWidth,u=i[0].offsetHeight;if(a){var p=r,f=this.getPosition(this.$viewport);r="bottom"==r&&l.bottom+u>f.bottom?"top":"top"==r&&l.top-u<f.top?"bottom":"right"==r&&l.right+c>f.width?"left":"left"==r&&l.left-c<f.left?"right":r,i.removeClass(p).addClass(r)}var d=this.getCalculatedOffset(r,l,c,u);this.applyPlacement(d,r);var h=function(){var t=n.hoverState;n.$element.trigger("shown.bs."+n.type),n.hoverState=null,"out"==t&&n.leave(n)};g.support.transition&&this.$tip.hasClass("fade")?i.one("bsTransitionEnd",h).emulateTransitionEnd(m.TRANSITION_DURATION):h()}},m.prototype.applyPlacement=function(t,e){var n=this.tip(),i=n[0].offsetWidth,o=n[0].offsetHeight,r=parseInt(n.css("margin-top"),10),s=parseInt(n.css("margin-left"),10);isNaN(r)&&(r=0),isNaN(s)&&(s=0),t.top+=r,t.left+=s,g.offset.setOffset(n[0],g.extend({using:function(t){n.css({top:Math.round(t.top),left:Math.round(t.left)})}},t),0),n.addClass("in");var a=n[0].offsetWidth,l=n[0].offsetHeight;"top"==e&&l!=o&&(t.top=t.top+o-l);var c=this.getViewportAdjustedDelta(e,t,a,l);c.left?t.left+=c.left:t.top+=c.top;var u=/top|bottom/.test(e),p=u?2*c.left-i+a:2*c.top-o+l,f=u?"offsetWidth":"offsetHeight";n.offset(t),this.replaceArrow(p,n[0][f],u)},m.prototype.replaceArrow=function(t,e,n){this.arrow().css(n?"left":"top",50*(1-t/e)+"%").css(n?"top":"left","")},m.prototype.setContent=function(){var t=this.tip(),e=this.getTitle();t.find(".tooltip-inner")[this.options.html?"html":"text"](e),t.removeClass("fade in top bottom left right")},m.prototype.hide=function(t){var e=this,n=g(this.$tip),i=g.Event("hide.bs."+this.type);function o(){"in"!=e.hoverState&&n.detach(),e.$element&&e.$element.removeAttr("aria-describedby").trigger("hidden.bs."+e.type),t&&t()}if(this.$element.trigger(i),!i.isDefaultPrevented())return n.removeClass("in"),g.support.transition&&n.hasClass("fade")?n.one("bsTransitionEnd",o).emulateTransitionEnd(m.TRANSITION_DURATION):o(),this.hoverState=null,this},m.prototype.fixTitle=function(){var t=this.$element;(t.attr("title")||"string"!=typeof t.attr("data-original-title"))&&t.attr("data-original-title",t.attr("title")||"").attr("title","")},m.prototype.hasContent=function(){return this.getTitle()},m.prototype.getPosition=function(t){var e=(t=t||this.$element)[0],n="BODY"==e.tagName,i=e.getBoundingClientRect();null==i.width&&(i=g.extend({},i,{width:i.right-i.left,height:i.bottom-i.top}));var o=window.SVGElement&&e instanceof window.SVGElement,r=n?{top:0,left:0}:o?null:t.offset(),s={scroll:n?document.documentElement.scrollTop||document.body.scrollTop:t.scrollTop()},a=n?{width:g(window).width(),height:g(window).height()}:null;return g.extend({},i,s,a,r)},m.prototype.getCalculatedOffset=function(t,e,n,i){return"bottom"==t?{top:e.top+e.height,left:e.left+e.width/2-n/2}:"top"==t?{top:e.top-i,left:e.left+e.width/2-n/2}:"left"==t?{top:e.top+e.height/2-i/2,left:e.left-n}:{top:e.top+e.height/2-i/2,left:e.left+e.width}},m.prototype.getViewportAdjustedDelta=function(t,e,n,i){var o={top:0,left:0};if(!this.$viewport)return o;var r=this.options.viewport&&this.options.viewport.padding||0,s=this.getPosition(this.$viewport);if(/right|left/.test(t)){var a=e.top-r-s.scroll,l=e.top+r-s.scroll+i;a<s.top?o.top=s.top-a:l>s.top+s.height&&(o.top=s.top+s.height-l)}else{var c=e.left-r,u=e.left+r+n;c<s.left?o.left=s.left-c:u>s.right&&(o.left=s.left+s.width-u)}return o},m.prototype.getTitle=function(){var t=this.$element,e=this.options;return t.attr("data-original-title")||("function"==typeof e.title?e.title.call(t[0]):e.title)},m.prototype.getUID=function(t){for(;t+=~~(1e6*Math.random()),document.getElementById(t););return t},m.prototype.tip=function(){if(!this.$tip&&(this.$tip=g(this.options.template),1!=this.$tip.length))throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!");return this.$tip},m.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},m.prototype.enable=function(){this.enabled=!0},m.prototype.disable=function(){this.enabled=!1},m.prototype.toggleEnabled=function(){this.enabled=!this.enabled},m.prototype.toggle=function(t){var e=this;t&&((e=g(t.currentTarget).data("bs."+this.type))||(e=new this.constructor(t.currentTarget,this.getDelegateOptions()),g(t.currentTarget).data("bs."+this.type,e))),t?(e.inState.click=!e.inState.click,e.isInStateTrue()?e.enter(e):e.leave(e)):e.tip().hasClass("in")?e.leave(e):e.enter(e)},m.prototype.destroy=function(){var t=this;clearTimeout(this.timeout),this.hide(function(){t.$element.off("."+t.type).removeData("bs."+t.type),t.$tip&&t.$tip.detach(),t.$tip=null,t.$arrow=null,t.$viewport=null,t.$element=null})};var t=g.fn.tooltip;g.fn.tooltip=function(i){return this.each(function(){var t=g(this),e=t.data("bs.tooltip"),n="object"==typeof i&&i;!e&&/destroy|hide/.test(i)||(e||t.data("bs.tooltip",e=new m(this,n)),"string"==typeof i&&e[i]())})},g.fn.tooltip.Constructor=m,g.fn.tooltip.noConflict=function(){return g.fn.tooltip=t,this}}(jQuery),function(o){"use strict";var r=function(t,e){this.init("popover",t,e)};if(!o.fn.tooltip)throw new Error("Popover requires tooltip.js");r.VERSION="3.3.7",r.DEFAULTS=o.extend({},o.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),((r.prototype=o.extend({},o.fn.tooltip.Constructor.prototype)).constructor=r).prototype.getDefaults=function(){return r.DEFAULTS},r.prototype.setContent=function(){var t=this.tip(),e=this.getTitle(),n=this.getContent();t.find(".popover-title")[this.options.html?"html":"text"](e),t.find(".popover-content").children().detach().end()[this.options.html?"string"==typeof n?"html":"append":"text"](n),t.removeClass("fade top bottom left right in"),t.find(".popover-title").html()||t.find(".popover-title").hide()},r.prototype.hasContent=function(){return this.getTitle()||this.getContent()},r.prototype.getContent=function(){var t=this.$element,e=this.options;return t.attr("data-content")||("function"==typeof e.content?e.content.call(t[0]):e.content)},r.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};var t=o.fn.popover;o.fn.popover=function(i){return this.each(function(){var t=o(this),e=t.data("bs.popover"),n="object"==typeof i&&i;!e&&/destroy|hide/.test(i)||(e||t.data("bs.popover",e=new r(this,n)),"string"==typeof i&&e[i]())})},o.fn.popover.Constructor=r,o.fn.popover.noConflict=function(){return o.fn.popover=t,this}}(jQuery),function(r){"use strict";function o(t,e){this.$body=r(document.body),this.$scrollElement=r(t).is(document.body)?r(window):r(t),this.options=r.extend({},o.DEFAULTS,e),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",r.proxy(this.process,this)),this.refresh(),this.process()}function e(i){return this.each(function(){var t=r(this),e=t.data("bs.scrollspy"),n="object"==typeof i&&i;e||t.data("bs.scrollspy",e=new o(this,n)),"string"==typeof i&&e[i]()})}o.VERSION="3.3.7",o.DEFAULTS={offset:10},o.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},o.prototype.refresh=function(){var t=this,i="offset",o=0;this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight(),r.isWindow(this.$scrollElement[0])||(i="position",o=this.$scrollElement.scrollTop()),this.$body.find(this.selector).map(function(){var t=r(this),e=t.data("target")||t.attr("href"),n=/^#./.test(e)&&r(e);return n&&n.length&&n.is(":visible")&&[[n[i]().top+o,e]]||null}).sort(function(t,e){return t[0]-e[0]}).each(function(){t.offsets.push(this[0]),t.targets.push(this[1])})},o.prototype.process=function(){var t,e=this.$scrollElement.scrollTop()+this.options.offset,n=this.getScrollHeight(),i=this.options.offset+n-this.$scrollElement.height(),o=this.offsets,r=this.targets,s=this.activeTarget;if(this.scrollHeight!=n&&this.refresh(),i<=e)return s!=(t=r[r.length-1])&&this.activate(t);if(s&&e<o[0])return this.activeTarget=null,this.clear();for(t=o.length;t--;)s!=r[t]&&e>=o[t]&&(void 0===o[t+1]||e<o[t+1])&&this.activate(r[t])},o.prototype.activate=function(t){this.activeTarget=t,this.clear();var e=this.selector+'[data-target="'+t+'"],'+this.selector+'[href="'+t+'"]',n=r(e).parents("li").addClass("active");n.parent(".dropdown-menu").length&&(n=n.closest("li.dropdown").addClass("active")),n.trigger("activate.bs.scrollspy")},o.prototype.clear=function(){r(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var t=r.fn.scrollspy;r.fn.scrollspy=e,r.fn.scrollspy.Constructor=o,r.fn.scrollspy.noConflict=function(){return r.fn.scrollspy=t,this},r(window).on("load.bs.scrollspy.data-api",function(){r('[data-spy="scroll"]').each(function(){var t=r(this);e.call(t,t.data())})})}(jQuery),function(a){"use strict";var s=function(t){this.element=a(t)};function e(n){return this.each(function(){var t=a(this),e=t.data("bs.tab");e||t.data("bs.tab",e=new s(this)),"string"==typeof n&&e[n]()})}s.VERSION="3.3.7",s.TRANSITION_DURATION=150,s.prototype.show=function(){var t=this.element,e=t.closest("ul:not(.dropdown-menu)"),n=t.data("target");if(n||(n=(n=t.attr("href"))&&n.replace(/.*(?=#[^\s]*$)/,"")),!t.parent("li").hasClass("active")){var i=e.find(".active:last a"),o=a.Event("hide.bs.tab",{relatedTarget:t[0]}),r=a.Event("show.bs.tab",{relatedTarget:i[0]});if(i.trigger(o),t.trigger(r),!r.isDefaultPrevented()&&!o.isDefaultPrevented()){var s=a(n);this.activate(t.closest("li"),e),this.activate(s,s.parent(),function(){i.trigger({type:"hidden.bs.tab",relatedTarget:t[0]}),t.trigger({type:"shown.bs.tab",relatedTarget:i[0]})})}}},s.prototype.activate=function(t,e,n){var i=e.find("> .active"),o=n&&a.support.transition&&(i.length&&i.hasClass("fade")||!!e.find("> .fade").length);function r(){i.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),t.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),o?(t[0].offsetWidth,t.addClass("in")):t.removeClass("fade"),t.parent(".dropdown-menu").length&&t.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),n&&n()}i.length&&o?i.one("bsTransitionEnd",r).emulateTransitionEnd(s.TRANSITION_DURATION):r(),i.removeClass("in")};var t=a.fn.tab;a.fn.tab=e,a.fn.tab.Constructor=s,a.fn.tab.noConflict=function(){return a.fn.tab=t,this};var n=function(t){t.preventDefault(),e.call(a(this),"show")};a(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',n).on("click.bs.tab.data-api",'[data-toggle="pill"]',n)}(jQuery),function(l){"use strict";var c=function(t,e){this.options=l.extend({},c.DEFAULTS,e),this.$target=l(this.options.target).on("scroll.bs.affix.data-api",l.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",l.proxy(this.checkPositionWithEventLoop,this)),this.$element=l(t),this.affixed=null,this.unpin=null,this.pinnedOffset=null,this.checkPosition()};function n(i){return this.each(function(){var t=l(this),e=t.data("bs.affix"),n="object"==typeof i&&i;e||t.data("bs.affix",e=new c(this,n)),"string"==typeof i&&e[i]()})}c.VERSION="3.3.7",c.RESET="affix affix-top affix-bottom",c.DEFAULTS={offset:0,target:window},c.prototype.getState=function(t,e,n,i){var o=this.$target.scrollTop(),r=this.$element.offset(),s=this.$target.height();if(null!=n&&"top"==this.affixed)return o<n&&"top";if("bottom"==this.affixed)return null!=n?!(o+this.unpin<=r.top)&&"bottom":!(o+s<=t-i)&&"bottom";var a=null==this.affixed,l=a?o:r.top;return null!=n&&o<=n?"top":null!=i&&t-i<=l+(a?s:e)&&"bottom"},c.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(c.RESET).addClass("affix");var t=this.$target.scrollTop(),e=this.$element.offset();return this.pinnedOffset=e.top-t},c.prototype.checkPositionWithEventLoop=function(){setTimeout(l.proxy(this.checkPosition,this),1)},c.prototype.checkPosition=function(){if(this.$element.is(":visible")){var t=this.$element.height(),e=this.options.offset,n=e.top,i=e.bottom,o=Math.max(l(document).height(),l(document.body).height());"object"!=typeof e&&(i=n=e),"function"==typeof n&&(n=e.top(this.$element)),"function"==typeof i&&(i=e.bottom(this.$element));var r=this.getState(o,t,n,i);if(this.affixed!=r){null!=this.unpin&&this.$element.css("top","");var s="affix"+(r?"-"+r:""),a=l.Event(s+".bs.affix");if(this.$element.trigger(a),a.isDefaultPrevented())return;this.affixed=r,this.unpin="bottom"==r?this.getPinnedOffset():null,this.$element.removeClass(c.RESET).addClass(s).trigger(s.replace("affix","affixed")+".bs.affix")}"bottom"==r&&this.$element.offset({top:o-t-i})}};var t=l.fn.affix;l.fn.affix=n,l.fn.affix.Constructor=c,l.fn.affix.noConflict=function(){return l.fn.affix=t,this},l(window).on("load",function(){l('[data-spy="affix"]').each(function(){var t=l(this),e=t.data();e.offset=e.offset||{},null!=e.offsetBottom&&(e.offset.bottom=e.offsetBottom),null!=e.offsetTop&&(e.offset.top=e.offsetTop),n.call(t,e)})})}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
